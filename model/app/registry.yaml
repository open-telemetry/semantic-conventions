groups:
  - id: registry.app
    type: attribute_group
    display_name: Application Attributes
    brief: >
      Describes attributes related to client-side applications (e.g. web apps or mobile apps).
    stability: development
    attributes:
      - id: app.installation.id
        type: string
        stability: development
        brief: >
          A unique identifier representing the installation of an application on a specific device
        note: |
          Its value SHOULD persist across launches of the same application installation, including through application upgrades.
          It SHOULD change if the application is uninstalled or if all applications of the vendor are uninstalled.
          Additionally, users might be able to reset this value (e.g. by clearing application data).
          If an app is installed multiple times on the same device (e.g. in different accounts on Android), each `app.installation.id` SHOULD have a different value.
          If multiple OpenTelemetry SDKs are used within the same application, they SHOULD use the same value for `app.installation.id`.
          Hardware IDs (e.g. serial number, IMEI, MAC address) MUST NOT be used as the `app.installation.id`.

          For iOS, this value SHOULD be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/identifierforvendor).

          For Android, examples of `app.installation.id` implementations include:

          - [Firebase Installation ID](https://firebase.google.com/docs/projects/manage-installations).
          - A globally unique UUID which is persisted across sessions in your application.
          - [App set ID](https://developer.android.com/identity/app-set-id).
          - [`Settings.getString(Settings.Secure.ANDROID_ID)`](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID).

          More information about Android identifier best practices can be found in the [Android user data IDs guide](https://developer.android.com/training/articles/user-data-ids).
        examples:
          - 2ab2916d-a51f-4ac8-80ee-45ac31a28092
      - id: app.jank.frame_count
        type: int
        stability: development
        brief: A number of frame renders that experienced jank.
        note: >
          Depending on platform limitations, the value provided MAY be approximation.
        examples: [ 9, 42 ]
      - id: app.jank.threshold
        stability: development
        type: double
        brief: The minimum rendering threshold for this jank, in seconds.
        examples: [ 0.016, 0.700, 1.024 ]
      - id: app.jank.period
        stability: development
        type: double
        brief: The time period, in seconds, for which this jank is being reported.
        examples: [ 1.0, 5.0, 10.24 ]
      - id: app.screen.coordinate.x
        type: int
        brief: The x (horizontal) coordinate of a screen coordinate, in screen pixels.
        stability: development
        examples: [ 0, 131 ]
      - id: app.screen.coordinate.y
        type: int
        brief: >
          The y (vertical) component of a screen coordinate, in screen pixels.
        stability: development
        examples: [ 12, 99 ]
      - id: app.screen.id
        type: string
        stability: development
        brief: >
          An identifier that uniquely differentiates this screen from other
          screens in the same application.
        note: >
          A screen represents only the part of the device display drawn by the app.
          It typically contains multiple widgets or UI components and
          is larger in scope than individual widgets. Multiple screens can
          coexist on the same display simultaneously (e.g., split view on tablets).
        examples:
          - f9bc787d-ff05-48ad-90e1-fca1d46130b3
          - com.example.app.MainActivity
          - com.example.shop.ProductDetailFragment
          - MyApp.ProfileView
          - MyApp.ProfileViewController
      - id: app.screen.name
        type: string
        stability: development
        brief: The name of an application screen.
        note: >
          A screen represents only the part of the device display drawn by the app.
          It typically contains multiple widgets or UI components and
          is larger in scope than individual widgets. Multiple screens can
          coexist on the same display simultaneously (e.g., split view on tablets).
        examples: ["MainActivity", "ProductDetailFragment", "ProfileView", "ProfileViewController"]
      - id: app.screen.depth
        type: int
        stability: development
        brief: >
          The depth of this screen in the application’s screen hierarchy, where 0 represents the root screen.
        note: >
          Depth represents the screen's position in the screen hierarchy tree.
          The root screen of the app is considered to have a depth of 0. Screens
          that are nested within other screens (such as in tab navigation, modals,
          or multi-screen flows) will have increasing depth values (1, 2, etc.).
          For example, a modal screen that is presented over the root screen would
          have a depth of 1, while a screen inside a modal might have a depth of 2.
        examples: [0, 2, 5]
      - id: app.screen.first_appear.duration
        type: int
        stability: development
        brief: >
          The time, in nanoseconds, from screen initialization to the first visual render of the screen.
        note: >
          This measures the time, in nanoseconds, until the first pixels of the screen
          are drawn and the screen becomes visible to the user.
          It does not necessarily mean the screen is fully interactive or that dynamic content
          (like images, API responses, or animations) is fully loaded.
        examples: [1000]
      - id: app.screen.load.duration
        type: int
        stability: development
        brief: >
          The total time, in nanoseconds, from navigation trigger (e.g., button tap)
          to when the screen is able to handle user interactions.
        note: >
          This includes time, in nanoseconds, spent rendering the screen, waiting for dynamic content
          (if necessary), and ensuring the app is ready to process user input.
          The screen is considered "ready" once the UI is able to respond to user interactions
          such as taps, swipes, or gestures.
        examples: [1000]
      - id: app.screen.main_thread_busy_time
        type: int
        stability: development
        brief: >
          The time, in nanoseconds, during which the main thread is occupied or
          blocked from processing user input, such as during rendering, animations,
          or network requests. This indicates the time the app is "busy" and unable to respond to user interactions.
      - id: app.screen.nodes
        type: int
        stability: development
        brief: >
          The total number of visual or interactive elements (widgets, views, components, etc.) within an application screen.
        note: >
          A "node" is any individual visual or interactive component contained within a screen.
          This includes UI elements like buttons, labels, text fields, images, containers, and static content such as images or text.
        examples: [5, 23, 147]
      - id: app.screen.type
        type:
          members:
            - id: swiftui
              value: "swiftui"
              brief: SwiftUI View (iOS)
              stability: development
            - id: uikit
              value: "uikit"
              brief: UIKit ViewController (iOS)
              stability: development
            - id: activity
              value: "activity"
              brief: Android Activity (Android)
              stability: development
            - id: fragment
              value: "fragment"
              brief: Android Fragment (Android)
              stability: development
        stability: development
        brief: >
          The type of UI management component or framework used to render and manage the screen's
          presentation and interactions.
        note: >
          This attribute indicates which framework or structure is used to manage and display the
          screen’s content. For iOS, it may refer to either SwiftUI (declarative) or UIKit (imperative) for managing views.
          On Android, it can refer to either an Activity or a Fragment.
        examples: ["swiftui", "uikit", "activity", "fragment"]
      - id: app.screen.visible.duration
        type: int
        stability: development
        brief: >
          The total time, in nanoseconds, that the screen remained visible to the user.
        note: >
          This attribute measures the duration during which the screen is visible and actively being displayed to the user.
          It begins when the screen becomes visible (e.g., `viewDidAppear` on iOS or `onResume` on Android) and ends when it is no longer visible
          (e.g., `viewWillDisappear` on iOS or `onPause` on Android).
          It does **not** include the time when the screen is in the background, nor does it account for time the screen may be obscured by other views
          or overlays (e.g., modals, popups, or other screens in split-view).
        examples: [1200, 5500, 700]
      - id: app.start.duration
        type: int
        stability: development
        brief: >
          The total time, in nanoseconds, taken for the application to start, from user initiation to being ready for interaction.
        note: >
          This is the time, in nanoseconds, between the user's initiation of the app start (e.g., tapping the app icon or opening a link) and the point when the app is fully ready for interaction,
          such as the main screen becoming visible or the app’s main functionality being accessible.
        examples: [1000]
      - id: app.start.type
        type:
          members:
            - id: cold
              value: "cold"
              brief: App start from terminated state
              stability: development
            - id: warm
              value: "warm"
              brief: App start from background state]
              stability: development
            - id: hot
              value: "hot"
              brief: App start from memory (already running)
              stability: development
            - id: pre_warm
              value: "pre_warm"
              brief: App start using pre-warmed process
              stability: development
        stability: development
        brief: >
          The type of application start, indicating the state of the app when it was initiated.
        note: |
          Start types include:

          - **Cold**: The app is started from a terminated state, meaning no prior instance of the app is running.
          - **Warm**: The app is started from the background, meaning an instance of the app is still in memory, but not active.
          - **Hot**: The app is already running and brought to the foreground, meaning no re-initialization is needed.
          - **Pre-Warm**: The app started uses a pre-warmed process, meaning part of the app's initialization has already been done in anticipation of the start.
        examples: ["cold", "warm", "hot", "pre_warm"]
      - id: app.widget.id
        type: string
        stability: development
        brief: >
          An identifier that uniquely differentiates this widget from other
          widgets in the same application.
        note: >
          A widget is an application component, typically an on-screen visual
          GUI element.
        examples:
          - f9bc787d-ff05-48ad-90e1-fca1d46130b3
          - submit_order_1829
      - id: app.widget.name
        type: string
        stability: development
        brief: The name of an application widget.
        note: >
          A widget is an application component, typically an on-screen visual
          GUI element.
        examples: [ "submit", "attack", "Clear Cart" ]
      - id: app.build_id
        type: string
        stability: development
        brief: 'Unique identifier for a particular build or compilation of the application.'
        examples: ['6cff0a7e-cefc-4668-96f5-1273d8b334d0', '9f2b833506aa6973a92fde9733e6271f', 'my-app-1.0.0-code-123']
