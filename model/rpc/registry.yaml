groups:
  - id: registry.rpc
    type: attribute_group
    display_name: Remote Procedure Call (RPC) Attributes
    brief: 'This document defines attributes for remote procedure calls.'
    attributes:
      - id: rpc.connect_rpc.request.metadata
        type: template[string[]]
        stability: development
        brief: >
          Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
        note: |
          Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
          Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

          For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
          the `rpc.connect_rpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
        examples: [["1.2.3.4", "1.2.3.5"]]
      - id: rpc.connect_rpc.response.metadata
        type: template[string[]]
        stability: development
        brief: >
          Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
        note: |
          Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
          Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

          For example, a property `my-custom-key` with value `"attribute_value"` SHOULD be recorded as
          the `rpc.connect_rpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
        examples: [["attribute_value"]]
      - id: rpc.status_code
        type: string
        stability: development
        brief: Status code of the RPC call.
        note: >
          The status code returned by the RPC server or generated by the client.
          Usually it represents an error code, but may also represent partial success,
          warning, or differentiate between various types of successful outcomes.

          Semantic conventions for individual RPC frameworks SHOULD document what
          `rpc.status_code` means in the context of that system.
        examples: ["OK", "DEADLINE_EXCEEDED", "-32602", "404"]
      - id: rpc.grpc.request.metadata
        type: template[string[]]
        stability: development
        brief: >
          gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
        note: |
          Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
          Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

          For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
          `rpc.grpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
        examples: [["1.2.3.4", "1.2.3.5"]]
      - id: rpc.grpc.response.metadata
        type: template[string[]]
        stability: development
        brief: >
          gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
        note: |
          Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
          Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

          For example, a property `my-custom-key` with value `["attribute_value"]` SHOULD be recorded as
          the `rpc.grpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
        examples: [["attribute_value"]]

      - id: rpc.jsonrpc.request_id
        type: string
        stability: development
        brief: >
          `id` property of request or response.
          Since protocol allows id to be int, string, `null` or missing (for notifications),
          value is expected to be cast to string for simplicity.
          Use empty string in case of `null` value. Omit entirely if this is a notification.
        examples: ['10', 'request-7', '']
      - id: rpc.jsonrpc.version
        type: string
        stability: development
        brief: "Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted."
        examples: ['2.0', '1.0']
      - id: rpc.method
        type: string
        stability: development
        brief: This is the logical name of the method from the RPC interface perspective.
        examples: "exampleMethod"
      - id: rpc.service
        type: string
        stability: development
        brief: 'The full (logical) name of the service being called, including its package name, if applicable.'
        examples: "myservice.EchoService"
      - id: rpc.system
        brief: 'A string identifying the remoting system. See below for a list of well-known identifiers.'
        type:
          members:
            - id: grpc
              value: 'grpc'
              brief: 'gRPC'
              stability: development
            - id: java_rmi
              value: 'java_rmi'
              brief: 'Java RMI'
              stability: development
            - id: dotnet_wcf
              value: 'dotnet_wcf'
              brief: '.NET WCF'
              stability: development
            - id: apache_dubbo
              value: 'apache_dubbo'
              brief: 'Apache Dubbo'
              stability: development
            - id: connect_rpc
              value: 'connect_rpc'
              brief: 'Connect RPC'
              stability: development
            - id: onc_rpc
              value: 'onc_rpc'
              brief: '[ONC RPC (Sun RPC)](https://datatracker.ietf.org/doc/html/rfc5531)'
              stability: development
            - id: jsonrpc
              value: 'jsonrpc'
              brief: 'JSON-RPC'
              stability: development
        stability: development
      - id: rpc.message.type
        type:
          members:
            - id: sent
              value: "SENT"
              stability: development
            - id: received
              value: "RECEIVED"
              stability: development
        stability: development
        brief: "Whether this is a received or sent message."
      - id: rpc.message.id
        type: int
        stability: development
        brief: "MUST be calculated as two different counters starting from `1` one for sent messages and one for received message."
        note: "This way we guarantee that the values will be consistent between different implementations."
      - id: rpc.message.compressed_size
        type: int
        stability: development
        brief: "Compressed size of the message in bytes."
      - id: rpc.message.uncompressed_size
        type: int
        stability: development
        brief: "Uncompressed size of the message in bytes."
