groups:
  - id: span.rpc.client
    type: span
    stability: development
    brief: This span represents an outgoing Remote Procedure Call (RPC).
    note: |
      Remote procedure calls can only be represented with these semantic conventions
      when the names of the called service and method are known and available.

      **Span name:** refer to the [Span Name](#span-name) section.

      **Span kind** MUST be `CLIENT`.
    extends: rpc_service
    span_kind: client
    events: [rpc.message]
    attributes:
      - ref: rpc.system
        requirement_level: required

  - id: span.rpc.server
    type: span
    stability: development
    extends: rpc_service.server
    span_kind: server
    brief: This span represents an incoming Remote Procedure Call (RPC).
    events: [rpc.message]
    note: |
      Remote procedure calls can only be represented with these semantic conventions
      when the names of the called service and method are known and available.

      **Span name:** refer to the [Span Name](#span-name) section.

      **Span kind** MUST be `SERVER`.
    attributes:
      - ref: rpc.system
        requirement_level: required

  - id: span.rpc.connect_rpc.client
    type: span
    stability: development
    brief: This span represents an outgoing Remote Procedure Call (RPC).
    note: |
      Remote procedure calls can only be represented with these semantic conventions
      when the names of the called service and method are known and available.

      `rpc.system` MUST be set to `"connect_rpc"` and SHOULD be provided **at span creation time.**

      **Span name:** refer to the [Span Name](./rpc-spans.md#span-name) section.

      **Span kind** MUST be `CLIENT`.

      **Span status**  If `rpc.connect_rpc.error_code` is set,
      [Span Status](https://github.com/open-telemetry/opentelemetry-specification/tree/v1.48.0/specification/trace/api.md#set-status) MUST be set to `Error` and left unset in all other cases.
    extends: span.rpc.client
    span_kind: client
    attributes:
      - ref: rpc.system
        examples: connect_rpc
      - ref: rpc.connect_rpc.error_code
        requirement_level:
          conditionally_required: If response is not successful and if error code available.
      - ref: rpc.connect_rpc.request.metadata
        requirement_level: opt_in
      - ref: rpc.connect_rpc.response.metadata
        requirement_level: opt_in

  - id: span.rpc.connect_rpc.server
    type: span
    stability: development
    extends: span.rpc.server
    span_kind: server
    brief: This span represents an incoming Remote Procedure Call (RPC).
    note: |
      Remote procedure calls can only be represented with these semantic conventions
      when the names of the called service and method are known and available.

      `rpc.system` MUST be set to `"connect_rpc"` and SHOULD be provided **at span creation time.**

      **Span name:** refer to the [Span Name](./rpc-spans.md#span-name) section.

      **Span kind** MUST be `SERVER`.

      **Span status**  If `rpc.connect_rpc.error_code` is set,
      [Span Status](https://github.com/open-telemetry/opentelemetry-specification/tree/v1.48.0/specification/trace/api.md#set-status) MUST be set to `Error` and left unset in all other cases.
    attributes:
      - ref: rpc.system
        examples: connect_rpc
      - ref: rpc.connect_rpc.error_code
        requirement_level:
          conditionally_required: If response is not successful and if error code available.
      - ref: rpc.connect_rpc.request.metadata
        requirement_level: opt_in
      - ref: rpc.connect_rpc.response.metadata
        requirement_level: opt_in

  - id: rpc.grpc.attributes
    stability: development
    type: attribute_group
    brief: 'Tech-specific attributes for gRPC.'
    attributes:
      - ref: rpc.grpc.status_code
        requirement_level: required
      - ref: rpc.grpc.request.metadata
        requirement_level: opt_in
      - ref: rpc.grpc.response.metadata
        requirement_level: opt_in

  - id: span.rpc.jsonrpc.client
    type: span
    stability: development
    brief: This span represents an outgoing Remote Procedure Call (RPC).
    note: |
      `rpc.system` MUST be set to `"jsonrpc"` and SHOULD be provided **at span creation time.**

      **Span name:** refer to the [Span Name](./rpc-spans.md#span-name) section.

      **Span kind** MUST be `CLIENT`.
    extends: rpc
    span_kind: client
    attributes:
      - ref: rpc.method
        requirement_level: required
      - ref: rpc.jsonrpc.version
        requirement_level:
          conditionally_required: If other than the default version (`1.0`)
      - ref: rpc.jsonrpc.request_id
        requirement_level: recommended
      - ref: rpc.jsonrpc.error_code
        requirement_level:
          conditionally_required: when available
      - ref: rpc.jsonrpc.error_message
        requirement_level: recommended

  - id: span.rpc.jsonrpc.server
    type: span
    stability: development
    extends: rpc.server
    span_kind: server
    brief: This span represents an incoming Remote Procedure Call (RPC).
    note: |
      `rpc.system` MUST be set to `"jsonrpc"` and SHOULD be provided **at span creation time.**

      **Span name:** refer to the [Span Name](./rpc-spans.md#span-name) section.

      **Span kind** MUST be `SERVER`.
    attributes:
      - ref: rpc.method
        requirement_level: required
      - ref: rpc.jsonrpc.version
        requirement_level:
          conditionally_required: If other than the default version (`1.0`)
      - ref: rpc.jsonrpc.request_id
        requirement_level: recommended
      - ref: rpc.jsonrpc.error_code
        requirement_level:
          conditionally_required: when available
      - ref: rpc.jsonrpc.error_message
        requirement_level: recommended

  - id: event.rpc.message
    type: event
    stability: development
    name: rpc.message
    brief: Describes a message sent or received within the context of an RPC call.
    note: >
      In the lifetime of an RPC stream, an event for each message sent/received on
      client and server spans SHOULD be created. In case of unary calls only one sent
      and one received message will be recorded for both client and server spans.
    attributes:
      - ref: rpc.message.type
        requirement_level: recommended
      - ref: rpc.message.id
        requirement_level: recommended
      - ref: rpc.message.compressed_size
        requirement_level: recommended
      - ref: rpc.message.uncompressed_size
        requirement_level: recommended
