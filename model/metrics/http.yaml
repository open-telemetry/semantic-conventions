groups:
  - id: metric_attributes.http.server
    type: attribute_group
    brief: 'HTTP server attributes'
    extends: attributes.http.server
    attributes:
      - ref: server.address
        brief: >
          Name of the local HTTP server that received the request.
        requirement_level: opt_in
        note: |
          Determined by using the first of the following that applies

          - The [primary server name](/docs/http/http-spans.md#http-server-definitions) of the matched virtual host. MUST only
            include host identifier.
          - Host identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
            if it's sent in absolute-form.
          - Host identifier of the `Host` header

          SHOULD NOT be set if only IP address is available and capturing name would require a reverse DNS lookup.

      - ref: server.port
        brief: >
          Port of the local HTTP server that received the request.
        requirement_level: opt_in
        note: |
          Determined by using the first of the following that applies

          - Port identifier of the [primary server host](/docs/http/http-spans.md#http-server-definitions) of the matched virtual host.
          - Port identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
            if it's sent in absolute-form.
          - Port identifier of the `Host` header
      # todo (lmolkova) build tools don't populate grandparent attributes
      - ref: error.type
        requirement_level:
          conditionally_required: If request has ended with an error.
        examples: ['timeout', 'name_resolution_error', '500']
        note: |
          If the request fails with an error before response status code was sent or received,
          `error.type` SHOULD be set to exception type or a component-specific low cardinality error code.

          If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
          `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error code.

          The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
          Instrumentations SHOULD document the list of errors they report.

          The cardinality of `error.type` within one instrumentation library SHOULD be low, but
          telemetry consumers that aggregate data from multiple instrumentation libraries and applications
          should be prepared for `error.type` to have high cardinality at query time, when no
          additional filters are applied.

          If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
      - ref: http.request.method
      - ref: http.response.status_code
      - ref: network.protocol.name
      - ref: network.protocol.version

  - id: metric_attributes.http.client
    type: attribute_group
    brief: 'HTTP client attributes'
    extends: attributes.http.client
    attributes:
      # todo (lmolkova) build tools don't populate grandparent attributes
      - ref: http.request.method
      - ref: http.response.status_code
      - ref: network.protocol.name
      - ref: network.protocol.version
      - ref: error.type
        requirement_level:
          conditionally_required: If request has ended with an error.
        examples: ['timeout', 'name_resolution_error', '500']
        note: |
          If the request fails with an error before response status code was sent or received,
          `error.type` SHOULD be set to exception type or a component-specific low cardinality error code.

          If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
          `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error code.

          The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
          Instrumentations SHOULD document the list of errors they report.

          The cardinality of `error.type` within one instrumentation library SHOULD be low, but
          telemetry consumers that aggregate data from multiple instrumentation libraries and applications
          should be prepared for `error.type` to have high cardinality at query time, when no
          additional filters are applied.

          If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
      - ref: url.scheme
        requirement_level: required

  - id: metric.http.server.request.duration
    type: metric
    metric_name: http.server.request.duration
    brief: "Measures the duration of inbound HTTP requests."
    instrument: histogram
    unit: "s"
    extends: metric_attributes.http.server

  - id: metric.http.server.active_requests
    type: metric
    metric_name: http.server.active_requests
    brief: "Measures the number of concurrent HTTP requests that are currently in-flight."
    instrument: updowncounter
    unit: "{request}"
    attributes:
      - ref: http.request.method
      - ref: url.scheme
        requirement_level: required
        examples: ["http", "https"]
      - ref: server.address
        requirement_level: opt_in
        brief: >
          Name of the local HTTP server that received the request.
        note: |
          Determined by using the first of the following that applies

          - The [primary server name](/docs/http/http-spans.md#http-server-definitions) of the matched virtual host. MUST only
            include host identifier.
          - Host identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
            if it's sent in absolute-form.
          - Host identifier of the `Host` header

          SHOULD NOT be set if only IP address is available and capturing name would require a reverse DNS lookup.

      - ref: server.port
        requirement_level: opt_in
        brief: >
          Port of the local HTTP server that received the request.
        note: |
          Determined by using the first of the following that applies

          - Port identifier of the [primary server host](/docs/http/http-spans.md#http-server-definitions) of the matched virtual host.
          - Port identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
            if it's sent in absolute-form.
          - Port identifier of the `Host` header

  - id: metric.http.server.request.body.size
    type: metric
    metric_name: http.server.request.body.size
    brief: "Measures the size of HTTP request messages."
    instrument: histogram
    unit: "By"
    note: >
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.server

  - id: metric.http.server.response.body.size
    type: metric
    metric_name: http.server.response.body.size
    brief: "Measures the size of HTTP response messages."
    instrument: histogram
    unit: "By"
    note: >
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.server

  - id: metric.http.client.request.duration
    type: metric
    metric_name: http.client.request.duration
    brief: "Measures the duration of outbound HTTP requests."
    instrument: histogram
    unit: "s"
    extends: metric_attributes.http.client

  - id: metric.http.client.request.body.size
    type: metric
    metric_name: http.client.request.body.size
    brief: "Measures the size of HTTP request messages."
    instrument: histogram
    unit: "By"
    note: >
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.client

  - id: metric.http.client.response.body.size
    type: metric
    metric_name: http.client.response.body.size
    brief: "Measures the size of HTTP response messages."
    instrument: histogram
    unit: "By"
    note: >
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and
      is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length)
      header. For requests using transport encoding, this should be the compressed size.
    extends: metric_attributes.http.client
