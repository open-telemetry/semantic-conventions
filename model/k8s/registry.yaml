groups:
  - id: registry.k8s
    type: attribute_group
    display_name: Kubernetes Attributes
    brief: >
      Kubernetes resource attributes.
    attributes:
      - id: k8s.cluster.name
        type: string
        stability: development
        brief: >
          The name of the cluster.
        examples: ['opentelemetry-cluster']
      - id: k8s.cluster.uid
        type: string
        stability: development
        brief: >
          A pseudo-ID for the cluster, set to the UID of the `kube-system`
          namespace.
        note: |
          K8s doesn't have support for obtaining a cluster ID. If this is ever
          added, we will recommend collecting the `k8s.cluster.uid` through the
          official APIs. In the meantime, we are able to use the `uid` of the
          `kube-system` namespace as a proxy for cluster ID. Read on for the
          rationale.

          Every object created in a K8s cluster is assigned a distinct UID. The
          `kube-system` namespace is used by Kubernetes itself and will exist
          for the lifetime of the cluster. Using the `uid` of the `kube-system`
          namespace is a reasonable proxy for the K8s ClusterID as it will only
          change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
          UUIDs as standardized by
          [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
          Which states:

          > If generated according to one of the mechanisms defined in Rec.
          > ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
          > different from all other UUIDs generated before 3603 A.D., or is
          > extremely likely to be different (depending on the mechanism chosen).

          Therefore, UIDs between clusters should be extremely unlikely to
          conflict.
        examples: ['218fc5a9-a5f1-4b54-aa05-46717d0ab26d']
      - id: k8s.node.name
        type: string
        stability: development
        brief: >
          The name of the Node.
        examples: ['node-1']
      - id: k8s.node.uid
        type: string
        stability: development
        brief: >
          The UID of the Node.
        examples: ['1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2']
      - id: k8s.node.label
        type: template[string]
        stability: development
        brief: >
          The label placed on the Node, the `<key>` being the label name, the value being the label value, even if the value is empty.
        note: |
          Examples:

          - A label `kubernetes.io/arch` with value `arm64` SHOULD be recorded
            as the `k8s.node.label.kubernetes.io/arch` attribute with value `"arm64"`.
          - A label `data` with empty string value SHOULD be recorded as
            the `k8s.node.label.data` attribute with value `""`.
        examples: ['arm64', '']
      - id: k8s.node.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation placed on the Node, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        note: |
          Examples:

          - An annotation `node.alpha.kubernetes.io/ttl` with value `0` SHOULD be recorded as
            the `k8s.node.annotation.node.alpha.kubernetes.io/ttl` attribute with value `"0"`.
          - An annotation `data` with empty string value SHOULD be recorded as
            the `k8s.node.annotation.data` attribute with value `""`.
        examples: [ '0', '' ]
      - id: k8s.namespace.name
        type: string
        stability: development
        brief: >
          The name of the namespace that the pod is running in.
        examples: ['default']
      - id: k8s.namespace.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the Namespace.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.namespace.label.kubernetes.io/metadata.name=default', 'k8s.namespace.label.data=']
      - id: k8s.namespace.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the Namespace.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.namespace.annotation.ttl=0', 'k8s.namespace.annotation.data=' ]
      - id: k8s.pod.uid
        type: string
        stability: development
        brief: >
          The UID of the Pod.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.pod.name
        type: string
        stability: development
        brief: >
          The name of the Pod.
        examples: ['opentelemetry-pod-autoconf']
      - id: k8s.pod.label
        type: template[string]
        stability: development
        brief: >
          The label placed on the Pod, the `<key>` being the label name, the value being the label value.
        examples: ['my-app', 'x64', '']
        note: |
          Examples:

          - A label `app` with value `my-app` SHOULD be recorded as
            the `k8s.pod.label.app` attribute with value `"my-app"`.
          - A label `mycompany.io/arch` with value `x64` SHOULD be recorded as
            the `k8s.pod.label.mycompany.io/arch` attribute with value `"x64"`.
          - A label `data` with empty string value SHOULD be recorded as
            the `k8s.pod.label.data` attribute with value `""`.
      - id: k8s.pod.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.
        note: |
          Examples:

          - An annotation `kubernetes.io/enforce-mountable-secrets` with value `true` SHOULD be recorded as
            the `k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets` attribute with value `"true"`.
          - An annotation `mycompany.io/arch` with value `x64` SHOULD be recorded as
            the `k8s.pod.annotation.mycompany.io/arch` attribute with value `"x64"`.
          - An annotation `data` with empty string value SHOULD be recorded as
            the `k8s.pod.annotation.data` attribute with value `""`.
        examples: [ 'true', 'x64', '' ]
      - id: k8s.container.name
        type: string
        stability: development
        brief: >
          The name of the Container from Pod specification, must be unique
          within a Pod. Container runtime usually uses different globally unique
          name (`container.name`).
        examples: ['redis']
      - id: k8s.container.restart_count
        type: int
        stability: development
        brief: >
          Number of times the container was restarted. This attribute can be
          used to identify a particular container (running or stopped) within a
          container spec.
      - id: k8s.container.status.last_terminated_reason
        type: string
        stability: development
        brief: >
          Last terminated reason of the Container.
        examples: ["Evicted", "Error"]

      - id: k8s.replicaset.uid
        type: string
        stability: development
        brief: >
          The UID of the ReplicaSet.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.replicaset.name
        type: string
        stability: development
        brief: >
          The name of the ReplicaSet.
        examples: ['opentelemetry']
      - id: k8s.replicaset.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the ReplicaSet.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.replicaset.label.app=guestbook', 'k8s.replicaset.label.injected=']
      - id: k8s.replicaset.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the ReplicaSet.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.replicaset.annotation.replicas=0', 'k8s.replicaset.annotation.data=' ]
      - id: k8s.replicationcontroller.uid
        type: string
        stability: development
        brief: >
          The UID of the replication controller.
        examples: [ '275ecb36-5aa8-4c2a-9c47-d8bb681b9aff' ]
      - id: k8s.replicationcontroller.name
        type: string
        stability: development
        brief: >
          The name of the replication controller.
        examples: [ 'opentelemetry' ]
      - id: k8s.resourcequota.uid
        type: string
        stability: development
        brief: >
          The UID of the resource quota.
        examples: [ '275ecb36-5aa8-4c2a-9c47-d8bb681b9aff' ]
      - id: k8s.resourcequota.name
        type: string
        stability: development
        brief: >
          The name of the resource quota.
        examples: [ 'opentelemetry' ]
      - id: k8s.deployment.uid
        type: string
        stability: development
        brief: >
          The UID of the Deployment.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.deployment.name
        type: string
        stability: development
        brief: >
          The name of the Deployment.
        examples: ['opentelemetry']
      - id: k8s.deployment.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the Deployment.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.deployment.label.app=guestbook', 'k8s.deployment.label.injected=']
      - id: k8s.deployment.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the Deployment.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.deployment.annotation.replicas=1', 'k8s.deployment.annotation.data=' ]
      - id: k8s.statefulset.uid
        type: string
        stability: development
        brief: >
          The UID of the StatefulSet.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.statefulset.name
        type: string
        stability: development
        brief: >
          The name of the StatefulSet.
        examples: ['opentelemetry']
      - id: k8s.statefulset.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the StatefulSet.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.statefulset.label.app=guestbook', 'k8s.statefulset.label.injected=']
      - id: k8s.statefulset.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the StatefulSet.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.statefulset.annotation.replicas=1', 'k8s.statefulset.annotation.data=' ]
      - id: k8s.daemonset.uid
        type: string
        stability: development
        brief: >
          The UID of the DaemonSet.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.daemonset.name
        type: string
        stability: development
        brief: >
          The name of the DaemonSet.
        examples: ['opentelemetry']
      - id: k8s.daemonset.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the DaemonSet.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.daemonset.label.app=guestbook', 'k8s.daemonset.label.injected=']
      - id: k8s.daemonset.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the DaemonSet.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.daemonset.annotation.replicas=1', 'k8s.daemonset.annotation.data=' ]
      - id: k8s.hpa.uid
        type: string
        stability: development
        brief: >
          The UID of the horizontal pod autoscaler.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.hpa.name
        type: string
        stability: development
        brief: >
          The name of the horizontal pod autoscaler.
        examples: ['opentelemetry']
      - id: k8s.job.uid
        type: string
        stability: development
        brief: >
          The UID of the Job.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.job.name
        type: string
        stability: development
        brief: >
          The name of the Job.
        examples: ['opentelemetry']
      - id: k8s.job.label
        type: template[string]
        stability: development
        brief: >
          The label key-value pairs placed on the Job.
        note: |
          The `<key>` being the label name, the value being the label value, even if the value is empty.
        examples: ['k8s.job.label.jobtype=ci', 'k8s.job.label.automated=']
      - id: k8s.job.annotation
        type: template[string]
        stability: development
        brief: >
          The annotation key-value pairs placed on the Job.
        note: |
          The `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
        examples: [ 'k8s.job.annotation.number=1', 'k8s.job.annotation.data=' ]
      - id: k8s.cronjob.uid
        type: string
        stability: development
        brief: >
          The UID of the CronJob.
        examples: ['275ecb36-5aa8-4c2a-9c47-d8bb681b9aff']
      - id: k8s.cronjob.name
        type: string
        stability: development
        brief: >
          The name of the CronJob.
        examples: ['opentelemetry']
      - id: k8s.cronjob.label
        type: template[string]
        stability: development
        brief: >
          The label placed on the CronJob, the `<key>` being the label name, the value being the label value.
        note: |
          Examples:

          - A label `type` with value `weekly` SHOULD be recorded as the
            `k8s.cronjob.label.type` attribute with value `"weekly"`.
          - A label `automated` with empty string value SHOULD be recorded as
            the `k8s.cronjob.label.automated` attribute with value `""`.
        examples: ['weekly', '']
      - id: k8s.cronjob.annotation
        type: template[string]
        stability: development
        brief: >
          The cronjob annotation placed on the CronJob, the `<key>` being the annotation name, the value being the annotation value.
        note: |
          Examples:

          - An annotation `retries` with value `4` SHOULD be recorded as the
            `k8s.cronjob.annotation.retries` attribute with value `"4"`.
          - An annotation `data` with empty string value SHOULD be recorded as
            the `k8s.cronjob.annotation.data` attribute with value `""`.
        examples: [ '4', '' ]
      - id: k8s.volume.name
        type: string
        stability: development
        brief: >
          The name of the K8s volume.
        examples: [ 'volume0' ]
      - id: k8s.volume.type
        stability: development
        brief: >
          The type of the K8s volume.
        examples: [ "emptyDir", "persistentVolumeClaim" ]
        type:
          members:
            - id: persistent_volume_claim
              value: 'persistentVolumeClaim'
              brief: "A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume"
              stability: development
            - id: config_map
              value: 'configMap'
              brief: "A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume"
              stability: development
            - id: downward_api
              value: 'downwardAPI'
              brief: "A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume"
              stability: development
            - id: empty_dir
              value: 'emptyDir'
              brief: "An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume"
              stability: development
            - id: secret
              value: 'secret'
              brief: "A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume"
              stability: development
            - id: local
              value: 'local'
              brief: "A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume"
              stability: development
      - id: k8s.namespace.phase
        stability: development
        brief: >
          The phase of the K8s namespace.
        note: |
          This attribute aligns with the `phase` field of the
          [K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)
        examples: [ "active", "terminating" ]
        type:
          members:
            - id: active
              value: 'active'
              brief: "Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)"
              stability: development
            - id: terminating
              value: 'terminating'
              brief: "Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)"
              stability: development
