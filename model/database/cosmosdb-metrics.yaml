groups:
  - id: metric.db.client.cosmosdb.operation.request_charge
    type: metric
    metric_name: db.client.cosmosdb.operation.request_charge
    brief: "[Request charge](https://learn.microsoft.com/azure/cosmos-db/request-units) consumed by the operation"
    instrument: histogram
    unit: "{request_unit}"
    stability: experimental
    extends: attributes.db.cosmosdb.minimal
    attributes:
      - ref: db.cosmosdb.regions_contacted
        requirement_level:
          recommended: If available

  - id: metric.db.client.cosmosdb.active_instance.count
    type: metric
    metric_name: db.client.cosmosdb.active_instance.count
    brief: "Number of active client instances"
    instrument: updowncounter
    unit: "{instance}"
    stability: experimental
    attributes:
      # TODO: add db.system once https://github.com/open-telemetry/build-tools/issues/192 is possible
      # - ref: db.system
      #   requirement_level:
      #     conditionally_required: if available
      - ref: server.address
        brief: >
          Name of the database host.
      - ref: server.port
        requirement_level:
          conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.

  - id: metric.db.client.cosmosdb.request.duration
    type: metric
    metric_name: db.client.cosmosdb.request.duration
    brief: "End to end latency of a network call made to Azure Cosmos DB backend service."
    instrument: histogram
    unit: "s"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal

  - id: metric.db.client.cosmosdb.request.body.size
    type: metric
    metric_name: db.client.cosmosdb.request.body.size
    brief: "Size of request body sent over wire to Azure Cosmos DB backend service."
    instrument: histogram
    unit: "By"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal

  - id: metric.db.client.cosmosdb.response.body.size
    type: metric
    metric_name: db.client.cosmosdb.response.body.size
    brief: "Size of response received from Azure Cosmos DB backend service."
    instrument: histogram
    unit: "By"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal

  - id: metric.db.client.cosmosdb.request.channel_aquisition.duration
    type: metric
    metric_name: db.client.cosmosdb.request.channel_aquisition.duration
    brief: "Time taken in creating connection, It is only applicable in Direct Mode."
    instrument: histogram
    unit: "s"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal

  - id: metric.db.server.cosmosdb.request.duration
    type: metric
    metric_name: db.server.cosmosdb.request.duration
    brief: "Backend Server Latency, i.e. time taken by Azure Cosmos DB server to process the request. It is only applicable in Direct Mode."
    instrument: histogram
    unit: "s"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal
    note: >
       This is the latency returned in response and reported from the client. It will not be reported if response was not received.

  - id: metric.db.client.cosmosdb.request.transit.duration
    type: metric
    metric_name: db.client.cosmosdb.request.transit.duration
    brief: >
      "Transit time refers to the duration taken by a request to travel across the networkâ€”from the moment it leaves the client to
      when the response is received back at the client. It is only applicable in Direct Mode."
    instrument: histogram
    unit: "s"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal

  - id: metric.db.client.cosmosdb.request.received.duration
    type: metric
    metric_name: db.client.cosmosdb.request.received.duration
    brief: "Received time is the duration from when the response is received until it is fully processed by the SDK. It is only applicable in Direct Mode."
    instrument: histogram
    unit: "s"
    stability: experimental
    extends: attributes.db.cosmosdb.network.minimal
