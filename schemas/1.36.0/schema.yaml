# TODO: toyaml generates some scrabbled output

{
  "groups": [
    {
      "attributes": [
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Common cross-signal messaging attributes.",
      "events": [],
      "id": "attributes.messaging.common.minimal",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "client.address",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "name": "client.port",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "These attributes may be used to describe the client in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn\u0027t expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "display_name": "Client Attributes",
      "events": [],
      "id": "registry.client",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/client/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "name": "exception.stacktrace",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "name": "exception.type",
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can\u0027t convert \u0027int\u0027 object to str implicitly"
          ],
          "name": "exception.message",
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This document defines attributes for exceptions represented using Log Records.\n",
      "events": [],
      "id": "log-exception",
      "instrument": null,
      "lineage": {
        "attributes": {
          "exception.message": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.exception"
          },
          "exception.stacktrace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.exception"
          },
          "exception.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.exception"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/exceptions/logs.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "name": "service.name",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "requirement_level": "required",
          "role": "identifying",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "name": "service.version",
          "requirement_level": "recommended",
          "role": "descriptive",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "A service instance.\n",
      "events": [],
      "id": "entity.service",
      "instrument": null,
      "lineage": {
        "attributes": {
          "service.instance.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "role"
            ],
            "source_group": "registry.service"
          },
          "service.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "role"
            ],
            "source_group": "registry.service"
          },
          "service.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "role"
            ],
            "source_group": "registry.service"
          },
          "service.version": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "role"
            ],
            "source_group": "registry.service"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/service/entities.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": "service",
      "span_kind": null,
      "stability": "stable",
      "type": "entity",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Common messaging metrics attributes.",
      "events": [],
      "id": "metric.messaging.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.partition.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.system": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Messaging consumer metrics attributes.",
      "events": [],
      "id": "metric.messaging.consumer.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.consumer.group.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.partition.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.subscription.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.system": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "name": "url.fragment",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "name": "url.path",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "name": "url.scheme",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "name": "url.full",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute\u0027s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue\u0026sig=REDACTED`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "tag": "sensitive-information",
          "type": "string"
        },
        {
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "name": "url.query",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry\u0026sig=REDACTED`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "tag": "sensitive-information",
          "type": "string"
        }
      ],
      "brief": "Attributes describing URL.",
      "events": [],
      "id": "url",
      "instrument": null,
      "lineage": {
        "attributes": {
          "url.fragment": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.url"
          },
          "url.full": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ],
            "source_group": "registry.url"
          },
          "url.path": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.url"
          },
          "url.query": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ],
            "source_group": "registry.url"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/url/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "name": "dotnet.gc.heap.generation",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Generation 0",
                "deprecated": null,
                "id": "gen0",
                "note": null,
                "stability": "stable",
                "value": "gen0"
              },
              {
                "brief": "Generation 1",
                "deprecated": null,
                "id": "gen1",
                "note": null,
                "stability": "stable",
                "value": "gen1"
              },
              {
                "brief": "Generation 2",
                "deprecated": null,
                "id": "gen2",
                "note": null,
                "stability": "stable",
                "value": "gen2"
              },
              {
                "brief": "Large Object Heap",
                "deprecated": null,
                "id": "loh",
                "note": null,
                "stability": "stable",
                "value": "loh"
              },
              {
                "brief": "Pinned Object Heap",
                "deprecated": null,
                "id": "poh",
                "note": null,
                "stability": "stable",
                "value": "poh"
              }
            ]
          }
        }
      ],
      "brief": "This document defines .NET related attributes.\n",
      "display_name": ".NET Attributes",
      "events": [],
      "id": "registry.dotnet",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.local.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.local.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        }
      ],
      "brief": "These attributes may be used for any network related operation.\n",
      "display_name": "Network Attributes",
      "events": [],
      "id": "registry.network",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/network/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Logical name of the service.\n",
          "examples": [
            "CICS TS",
            "Datacom",
            "ADABAS"
          ],
          "name": "service.name",
          "note": "For z/OS system software, SHOULD be set to an abbreviated name of the z/OS system software.",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": "5.6",
          "name": "service.version",
          "note": "For z/OS system software, SHOULD be set to the version of the z/OS system software.",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "A software service running on a z/OS system.",
      "events": [],
      "id": "service.zos.software",
      "instrument": null,
      "lineage": {
        "attributes": {
          "service.instance.id": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.service"
          },
          "service.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.service"
          },
          "service.namespace": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.service"
          },
          "service.version": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.service"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/zos/resources.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": "service.zos.software",
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "name": "aspnetcore.rate_limiting.result",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Lease was acquired",
                "deprecated": null,
                "id": "acquired",
                "note": null,
                "stability": "stable",
                "value": "acquired"
              },
              {
                "brief": "Lease request was rejected by the endpoint limiter",
                "deprecated": null,
                "id": "endpoint_limiter",
                "note": null,
                "stability": "stable",
                "value": "endpoint_limiter"
              },
              {
                "brief": "Lease request was rejected by the global limiter",
                "deprecated": null,
                "id": "global_limiter",
                "note": null,
                "stability": "stable",
                "value": "global_limiter"
              },
              {
                "brief": "Lease request was canceled",
                "deprecated": null,
                "id": "request_canceled",
                "note": null,
                "stability": "stable",
                "value": "request_canceled"
              }
            ]
          }
        },
        {
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "name": "aspnetcore.routing.is_fallback",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        },
        {
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "name": "aspnetcore.diagnostics.handler.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Flag indicating if request was handled by the application pipeline.",
          "examples": [
            true
          ],
          "name": "aspnetcore.request.is_unhandled",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        },
        {
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "name": "aspnetcore.routing.match_status",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Match succeeded",
                "deprecated": null,
                "id": "success",
                "note": null,
                "stability": "stable",
                "value": "success"
              },
              {
                "brief": "Match failed",
                "deprecated": null,
                "id": "failure",
                "note": null,
                "stability": "stable",
                "value": "failure"
              }
            ]
          }
        },
        {
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "name": "aspnetcore.diagnostics.exception.result",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Exception was handled by the exception handling middleware.",
                "deprecated": null,
                "id": "handled",
                "note": null,
                "stability": "stable",
                "value": "handled"
              },
              {
                "brief": "Exception was not handled by the exception handling middleware.",
                "deprecated": null,
                "id": "unhandled",
                "note": null,
                "stability": "stable",
                "value": "unhandled"
              },
              {
                "brief": "Exception handling was skipped because the response had started.",
                "deprecated": null,
                "id": "skipped",
                "note": null,
                "stability": "stable",
                "value": "skipped"
              },
              {
                "brief": "Exception handling didn\u0027t run because the request was aborted.",
                "deprecated": null,
                "id": "aborted",
                "note": null,
                "stability": "stable",
                "value": "aborted"
              }
            ]
          }
        }
      ],
      "brief": "ASP.NET Core attributes",
      "display_name": "ASP.NET Core Attributes",
      "events": [],
      "id": "registry.aspnetcore",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "name": "jvm.gc.action",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "name": "jvm.gc.name",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Whether the thread is daemon or not.",
          "name": "jvm.thread.daemon",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        },
        {
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "name": "jvm.thread.state",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A thread that has not yet started is in this state.",
                "deprecated": null,
                "id": "new",
                "note": null,
                "stability": "stable",
                "value": "new"
              },
              {
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "deprecated": null,
                "id": "runnable",
                "note": null,
                "stability": "stable",
                "value": "runnable"
              },
              {
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "deprecated": null,
                "id": "blocked",
                "note": null,
                "stability": "stable",
                "value": "blocked"
              },
              {
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "deprecated": null,
                "id": "waiting",
                "note": null,
                "stability": "stable",
                "value": "waiting"
              },
              {
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "deprecated": null,
                "id": "timed_waiting",
                "note": null,
                "stability": "stable",
                "value": "timed_waiting"
              },
              {
                "brief": "A thread that has exited is in this state.",
                "deprecated": null,
                "id": "terminated",
                "note": null,
                "stability": "stable",
                "value": "terminated"
              }
            ]
          }
        }
      ],
      "brief": "This document defines Java Virtual machine related attributes.\n",
      "display_name": "Java Virtual Machine (JVM) Attributes",
      "events": [],
      "id": "registry.jvm",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s available"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n\u003e **Warning**\n\u003e Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n\u003e to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n\u003e **Warning**\n\u003e Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n\u003e to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "HTTP server attributes",
      "events": [],
      "id": "metric_attributes.http.server",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.route": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "user_agent.synthetic.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.user_agent.os"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.address` SHOULD match the host component of the request target.\n\nIn all other cases, `server.address` SHOULD match the host component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n\nIf an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then\n`server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.port` SHOULD match the port component of the request target.\n\nIn all other cases, `server.port` SHOULD match the port component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "HTTP client attributes",
      "events": [],
      "id": "metric_attributes.http.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "url.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.address` SHOULD match the host component of the request target.\n\nIn all other cases, `server.address` SHOULD match the host component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n\nIf an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then\n`server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.port` SHOULD match the port component of the request target.\n\nIn all other cases, `server.port` SHOULD match the port component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "HTTP client experimental attributes",
      "events": [],
      "id": "metric_attributes.http.client.experimental",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "url.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s available"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n\u003e **Warning**\n\u003e Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n\u003e to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n\u003e **Warning**\n\u003e Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n\u003e to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "Duration of HTTP server requests.",
      "events": [],
      "id": "metric.http.server.request.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.route": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "user_agent.synthetic.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.user_agent.os"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "http.server.request.duration",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.address` SHOULD match the host component of the request target.\n\nIn all other cases, `server.address` SHOULD match the host component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n\nIf an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then\n`server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.port` SHOULD match the port component of the request target.\n\nIn all other cases, `server.port` SHOULD match the port component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Duration of HTTP client requests.",
      "events": [],
      "id": "metric.http.client.request.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "url.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "http.client.request.duration",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "If and only if `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "name": "db.system.name",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation\u0027s best knowledge.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "[MariaDB](https://mariadb.org/)",
                "deprecated": null,
                "id": "mariadb",
                "note": null,
                "stability": "stable",
                "value": "mariadb"
              },
              {
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "deprecated": null,
                "id": "microsoft.sql_server",
                "note": null,
                "stability": "stable",
                "value": "microsoft.sql_server"
              },
              {
                "brief": "[MySQL](https://www.mysql.com/)",
                "deprecated": null,
                "id": "mysql",
                "note": null,
                "stability": "stable",
                "value": "mysql"
              },
              {
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "deprecated": null,
                "id": "postgresql",
                "note": null,
                "stability": "stable",
                "value": "postgresql"
              }
            ]
          }
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Duration of database client operations.",
      "events": [],
      "id": "metric.db.client.operation.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.system.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "network.peer.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "db.client.operation.duration",
      "name": null,
      "note": "Batch operations SHOULD be recorded as a single operation.\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Common attributes for all GenAI spans.\n",
      "events": [],
      "id": "attributes.gen_ai.common.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "gen_ai.operation.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/gen-ai/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Describes GenAI inference attributes.\n",
      "events": [],
      "id": "attributes.gen_ai.inference.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "gen_ai.conversation.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.operation.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.output.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.choice.count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.frequency_penalty": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.max_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.presence_penalty": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.seed": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.stop_sequences": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.temperature": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.top_p": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.finish_reasons": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.usage.input_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.usage.output_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/gen-ai/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Describes attributes that are common to OpenAI-based Generative AI services.\n",
      "events": [],
      "id": "attributes.gen_ai.inference.openai_based",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "gen_ai.conversation.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.operation.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.output.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.choice.count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.frequency_penalty": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.max_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.presence_penalty": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.seed": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.stop_sequences": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.temperature": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.top_p": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.finish_reasons": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.usage.input_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.usage.output_tokens": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/gen-ai/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "1.2.3.4",
              "1.2.3.5"
            ]
          ],
          "name": "http.request.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nThe `User-Agent` header is already captured in the `user_agent.original` attribute.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`\n  attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "name": "http.request.method_original",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s different than `http.request.method`."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "name": "http.request.resend_count",
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "requirement_level": {
            "recommended": "if and only if request was retried."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "HTTP response headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "abc",
              "def"
            ]
          ],
          "name": "http.response.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`\n  attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.address` SHOULD match the host component of the request target.\n\nIn all other cases, `server.address` SHOULD match the host component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n\nIf an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then\n`server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.port` SHOULD match the port component of the request target.\n\nIn all other cases, `server.port` SHOULD match the port component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "name": "url.full",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute\u0027s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue\u0026sig=REDACTED`.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "name": "user_agent.original",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This span represents an outbound HTTP request.\n",
      "events": [],
      "id": "span.http.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.header": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.http"
          },
          "http.request.method_original": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.resend_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.header": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.peer.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "url.full": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.url"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "url.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "user_agent.original": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.user_agent"
          },
          "user_agent.synthetic.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.user_agent.os"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "There are two ways HTTP client spans can be implemented in an instrumentation:\n\n1. Instrumentations SHOULD create an HTTP span for each attempt to send an HTTP request over the wire.\n   In case the request is resent, the resend attempts MUST follow the [HTTP resend spec](#http-request-retries-and-redirects).\n   In this case, instrumentations SHOULD NOT (also) emit a logical encompassing HTTP client span.\n\n2. If for some reason it is not possible to emit a span for each send attempt (because e.g. the instrumented library does not expose hooks that would allow this),\n   instrumentations MAY create an HTTP span for the top-most operation of the HTTP client.\n   In this case, the `url.full` MUST be the absolute URL that was originally requested, before any HTTP-redirects that may happen when executing the request.\n\n**Span name:** refer to the [Span Name](/docs/http/http-spans.md#name) section.\n\n**Span kind** MUST be `CLIENT`.\n\n**Span status:** refer to the [Span Status](/docs/http/http-spans.md#status) section.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "83.164.160.102"
          ],
          "name": "client.address",
          "note": "The IP address of the original client behind all proxies, if known (e.g. from [Forwarded#for](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#for), [X-Forwarded-For](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For), or a similar header). Otherwise, the immediate client peer address.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The port of whichever client was captured in `client.address`.",
          "examples": [
            65123
          ],
          "name": "client.port",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it\u0027s available.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Local socket address. Useful in case of a multi-IP host.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.local.address",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Local socket port. Useful in case of a multi-port host.",
          "examples": [
            65123
          ],
          "name": "network.local.port",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s available"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "name": "http.request.method_original",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s different than `http.request.method`."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP response headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "abc",
              "def"
            ]
          ],
          "name": "http.response.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`\n  attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "HTTP request headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "1.2.3.4",
              "1.2.3.5"
            ]
          ],
          "name": "http.request.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nThe `User-Agent` header is already captured in the `user_agent.original` attribute.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`\n  attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n",
          "requirement_level": "opt_in",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "requirement_level": {
            "conditionally_required": "If available and `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "name": "url.path",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "name": "url.query",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry\u0026sig=REDACTED`.\n",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "name": "user_agent.original",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This span represents an inbound HTTP request.\n",
      "events": [],
      "id": "span.http.server",
      "instrument": null,
      "lineage": {
        "attributes": {
          "client.address": {
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "sampling_relevant"
            ],
            "source_group": "registry.client"
          },
          "client.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.client"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.header": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.http"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.http"
          },
          "http.request.method_original": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.request.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.header": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.route": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.local.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.local.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "url.path": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.url"
          },
          "url.query": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.url"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.url"
          },
          "user_agent.original": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.user_agent"
          },
          "user_agent.synthetic.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.user_agent.os"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "**Span name:** refer to the [Span Name](/docs/http/http-spans.md#name) section.\n\n**Span kind** MUST be `SERVER`.\n\n**Span status:** refer to the [Span Status](/docs/http/http-spans.md#status) section.\n",
      "span_kind": "server",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "This group defines the attributes used to perform database client calls.",
      "events": [],
      "id": "trace.db.common.minimal",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This group defines the attributes used to perform database client calls.",
      "events": [],
      "id": "trace.db.common.query",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This group defines the attributes used to perform database client calls.",
      "events": [],
      "id": "trace.db.common.query_and_collection",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "name": "db.system.name",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation\u0027s best knowledge.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "[MariaDB](https://mariadb.org/)",
                "deprecated": null,
                "id": "mariadb",
                "note": null,
                "stability": "stable",
                "value": "mariadb"
              },
              {
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "deprecated": null,
                "id": "microsoft.sql_server",
                "note": null,
                "stability": "stable",
                "value": "microsoft.sql_server"
              },
              {
                "brief": "[MySQL](https://www.mysql.com/)",
                "deprecated": null,
                "id": "mysql",
                "note": null,
                "stability": "stable",
                "value": "mysql"
              },
              {
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "deprecated": null,
                "id": "postgresql",
                "note": null,
                "stability": "stable",
                "value": "postgresql"
              }
            ]
          }
        }
      ],
      "brief": "This group documents attributes that describe database call along with network information.",
      "events": [],
      "id": "trace.db.common.full",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.system.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "network.peer.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "name": "db.system.name",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation\u0027s best knowledge.\n",
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "[MariaDB](https://mariadb.org/)",
                "deprecated": null,
                "id": "mariadb",
                "note": null,
                "stability": "stable",
                "value": "mariadb"
              },
              {
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "deprecated": null,
                "id": "microsoft.sql_server",
                "note": null,
                "stability": "stable",
                "value": "microsoft.sql_server"
              },
              {
                "brief": "[MySQL](https://www.mysql.com/)",
                "deprecated": null,
                "id": "mysql",
                "note": null,
                "stability": "stable",
                "value": "mysql"
              },
              {
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "deprecated": null,
                "id": "postgresql",
                "note": null,
                "stability": "stable",
                "value": "postgresql"
              }
            ]
          }
        }
      ],
      "brief": "This span describes database client call.",
      "events": [],
      "id": "span.db.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.system.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "network.peer.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "Instrumentations SHOULD, when possible, record database spans that cover the duration of\nthe corresponding API call as if it was observed by the caller (such as client application).\nFor example, if a transient issue happened and was retried within this database call, the corresponding\nspan should cover the duration of the logical operation with all retries.\n\nWhen a database client provides higher-level convenience APIs for specific operations\n(e.g., calling a stored procedure), which internally generate and execute a generic query,\nit is RECOMMENDED to instrument the higher-level convenience APIs.\nThese often allow setting `db.operation.*` attributes, which usually are not\nreadily available at the generic query level.\n\n**Span name** is covered in the [Name](/docs/database/database-spans.md#name) section.\n\n**Span kind** SHOULD be `CLIENT`. It MAY be set to `INTERNAL` on spans representing\nin-memory database calls.\nIt\u0027s RECOMMENDED to use `CLIENT` kind when database system being instrumented usually\nruns in a different process than its client or when database calls happen over\ninstrumented protocol such as HTTP.\n\n**Span status** Refer to the [Recording Errors](/docs/general/recording-errors.md)\ndocument for details on how to record span status. Semantic conventions for\nindividual systems SHOULD specify which values of `db.response.status_code`\nclassify as errors.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "The collection name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple collection names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database associated with the connection, qualified by the instance name.\n",
          "examples": [
            "instance1.products",
            "customers"
          ],
          "name": "db.namespace",
          "note": "When connected to a default instance, `db.namespace` SHOULD be set to the name of\nthe database. When connected to a [named instance](https://learn.microsoft.com/sql/connect/jdbc/building-the-connection-url#named-and-multiple-sql-server-instances),\n`db.namespace` SHOULD be set to the combination of instance and database name following the `{instance_name}|{database_name}` pattern.\n\nA connection\u0027s currently associated database may change during its lifetime, e.g. from executing `USE \u003cdatabase\u003e`.\n\nIf instrumentation is unable to capture the connection\u0027s currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DB_NAME()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "EXECUTE",
            "INSERT"
          ],
          "name": "db.operation.name",
          "note": "The operation name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple operation names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[Microsoft SQL Server error](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors) number represented as a string.\n",
          "examples": [
            "102",
            "40020"
          ],
          "name": "db.response.status_code",
          "note": "Microsoft SQL Server does not report SQLSTATE.\nInstrumentations SHOULD use [error severity](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-error-severities) returned along with the status code to determine the status of the span. Response codes with severity 11 or higher SHOULD be considered errors.\n",
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Spans representing calls to Microsoft SQL Server adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).\n",
      "events": [],
      "id": "span.db.sql_server.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "`db.system.name` MUST be set to `\"microsoft.sql_server\"` and SHOULD be provided **at span creation time**.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "The collection name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple collection names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "EXECUTE",
            "INSERT"
          ],
          "name": "db.operation.name",
          "note": "The operation name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple operation names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The schema associated with the connection, qualified by the database name.\n",
          "examples": [
            "mydatabase.products",
            "mydatabase.customers"
          ],
          "name": "db.namespace",
          "note": "`db.namespace` SHOULD be set to the combination of database and schema name following the `{database}|{schema}` pattern.\nIf either `{database}` or `{schema}` is unavailable, `db.namespace` SHOULD be set to the other (without any `|` separator).\n\nA connection\u0027s currently associated database may change during its lifetime, e.g. from executing `SET search_path TO \u003cschema\u003e`.\nIf the search path has multiple schemas, the first schema in the search path SHOULD be used.\n\nIf instrumentation is unable to capture the connection\u0027s currently associated schema on each query\nwithout triggering an additional query to be executed (e.g. `SELECT current_schema()`),\nthen it is RECOMMENDED to fallback and use the schema provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the schema provided when the connection was established.\n\nInstrumentation MAY use the user name when the connection was established as a stand-in for the schema name.\n\nInstrumentation SHOULD document if `db.namespace` reflects the user provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[PostgreSQL error code](https://www.postgresql.org/docs/current/errcodes-appendix.html).\n",
          "examples": [
            "08000",
            "08P01"
          ],
          "name": "db.response.status_code",
          "note": "PostgreSQL follows SQL standard conventions for [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE). Response codes of \"Class 02\" or higher SHOULD be considered errors.\n",
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Spans representing calls to a PostgreSQL database adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).\n",
      "events": [],
      "id": "span.db.postgresql.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "`db.system.name` MUST be set to `\"postgresql\"` and SHOULD be provided **at span creation time**.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "The collection name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple collection names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "EXECUTE",
            "INSERT"
          ],
          "name": "db.operation.name",
          "note": "The operation name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple operation names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database associated with the connection.",
          "examples": [
            "products",
            "customers"
          ],
          "name": "db.namespace",
          "note": "A connection\u0027s currently associated database may change during its lifetime, e.g. from executing `USE \u003cdatabase\u003e`.\n\nIf instrumentation is unable to capture the connection\u0027s currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[MySQL error number](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html) recorded as a string.\n",
          "examples": [
            "1005",
            "MY-010016"
          ],
          "name": "db.response.status_code",
          "note": "MySQL error codes are vendor specific error codes and don\u0027t follow [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) conventions. All MySQL error codes SHOULD be considered errors.\n",
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Spans representing calls to a MySQL Server adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).\n",
      "events": [],
      "id": "span.db.mysql.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "`db.system.name` MUST be set to `\"mysql\"` and SHOULD be provided **at span creation time**.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "The collection name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple collection names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "EXECUTE",
            "INSERT"
          ],
          "name": "db.operation.name",
          "note": "The operation name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple operation names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database associated with the connection.",
          "examples": [
            "products",
            "customers"
          ],
          "name": "db.namespace",
          "note": "A connection\u0027s currently associated database may change during its lifetime, e.g. from executing `USE \u003cdatabase\u003e`.\n\nIf instrumentation is unable to capture the connection\u0027s currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[Maria DB error code](https://mariadb.com/kb/en/mariadb-error-code-reference/) represented as a string.\n",
          "examples": [
            "1008",
            "3058"
          ],
          "name": "db.response.status_code",
          "note": "MariaDB uses vendor-specific error codes on all errors and reports [SQLSTATE](https://mariadb.com/kb/en/sqlstate/) in some cases.\nMariaDB error codes are more granular than SQLSTATE, so MariaDB instrumentations SHOULD set the `db.response.status_code` to this known error code.\nWhen SQLSTATE is available, SQLSTATE of \"Class 02\" or higher SHOULD be considered errors. When SQLSTATE is not available, all MariaDB error codes SHOULD be considered errors.\n",
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Spans representing calls to MariaDB adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/README.md).\n",
      "events": [],
      "id": "span.db.mariadb.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "`db.system.name` MUST be set to `\"mariadb\"` and SHOULD be provided **at span creation time**.\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If operation applies to a specific stored procedure."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.\u003ckey\u003e`](/docs/registry/attributes/db.md)).\n"
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "The collection name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple collection names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "EXECUTE",
            "INSERT"
          ],
          "name": "db.operation.name",
          "note": "The operation name SHOULD NOT be extracted from `db.query.text`.\n",
          "requirement_level": {
            "recommended": "If the operation is executed via a higher-level API that does not support multiple operation names."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database associated with the connection, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "note": "If a database system has multiple namespace components (e.g. schema name and database name), they SHOULD be concatenated\nfrom the most general to the most specific namespace component,\nusing `|` as a separator between the components.\nAny missing components (and their associated separators) SHOULD be omitted.\n\nSemantic conventions for individual database systems SHOULD document what `db.namespace`\nmeans in the context of that system.\n\nA connection\u0027s currently associated database may change during its lifetime, e.g. from executing `USE \u003cdatabase\u003e`.\n\nIf instrumentation is unable to capture the connection\u0027s currently associated database on each query\nwithout triggering an additional query to be executed (e.g. `SELECT DATABASE()`),\nthen it is RECOMMENDED to fallback and use the database provided when the connection was established.\n\nInstrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.\n\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": {
            "conditionally_required": "If available without an additional network call."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Database response code recorded as a string.\n",
          "examples": [
            "ORA-17027",
            "1052",
            "2201B"
          ],
          "name": "db.response.status_code",
          "note": "SQL defines [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) as a database\nreturn code which is adopted by some database systems like PostgreSQL.\nSee [PostgreSQL error codes](https://www.postgresql.org/docs/current/errcodes-appendix.html)\nfor the details.\n\nOther systems like MySQL, Oracle, or MS SQL Server define vendor-specific\nerror codes. Database SQL drivers usually provide access to both properties.\nFor example, in Java, the [`SQLException`](https://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html)\nclass reports them with `getSQLState()` and `getErrorCode()` methods.\n\nInstrumentations SHOULD populate the `db.response.status_code` with the\nthe most specific code available to them.\n\nHere\u0027s a non-exhaustive list of databases that report vendor-specific\ncodes with granularity higher than SQLSTATE (or don\u0027t report SQLSTATE\nat all):\n\n- [DB2 SQL codes](https://www.ibm.com/docs/db2-for-zos/12?topic=codes-sql).\n- [Maria DB error codes](https://mariadb.com/kb/en/mariadb-error-code-reference/)\n- [Microsoft SQL Server errors](https://docs.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors)\n- [MySQL error codes](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html)\n- [Oracle error codes](https://docs.oracle.com/cd/B28359_01/server.111/b28278/toc.htm)\n- [SQLite result codes](https://www.sqlite.org/rescode.html)\n\nThese systems SHOULD set the `db.response.status_code` to a\nknown vendor-specific error code. If only SQLSTATE is available,\nit SHOULD be used.\n\nWhen multiple error codes are available and specificity is unclear,\ninstrumentation SHOULD set the `db.response.status_code` to the\nconcatenated string of all codes with \u0027/\u0027 used as a separator.\n\nFor example, generic DB instrumentation that detected an error and has\nSQLSTATE `\"42000\"` and vendor-specific `1071` should set\n`db.response.status_code` to `\"42000/1071\"`.\"\n",
          "requirement_level": {
            "conditionally_required": "If response has ended with warning or an error."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "The SQL databases Semantic Conventions describes how common [Database Semantic Conventions](/docs/database/database-spans.md) apply to SQL databases.\n",
      "events": [],
      "id": "span.db.sql.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.operation.batch.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.parameter": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.db"
          },
          "db.response.returned_rows": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.stored_procedure.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "note": "The following database systems (defined in the\n[`db.system.name`](/docs/database/database-spans.md#notes-and-well-known-identifiers-for-dbsystemname) set)\nare known to use SQL as their primary query language:\n\n- `actian.ingres`\n- `cockroachdb`\n- `derby`\n- `firebirdsql`\n- `h2database`\n- `hsqldb`\n- `ibm.db2`\n- `mariadb`\n- `microsoft.sql_server`\n- `mysql`\n- `oracle.db`\n- `other_sql`\n- `postgresql`\n- `sap.maxdb`\n- `sqlite`\n- `trino`\n\nMany other database systems support SQL and can be accessed via generic database driver such as JDBC or ODBC.\nInstrumentations applied to generic SQL drivers SHOULD adhere to SQL semantic conventions.\n\n**Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)\n",
      "span_kind": "client",
      "stability": "stable",
      "type": "span",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "name": "exception.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can\u0027t convert \u0027int\u0027 object to str implicitly"
          ],
          "name": "exception.message",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "name": "exception.stacktrace",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This document defines the shared attributes used to report a single exception associated with a span or log.\n",
      "display_name": "Exception Attributes",
      "events": [],
      "id": "registry.exception",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/exceptions/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "This group describes GenAI metrics attributes",
      "events": [],
      "id": "metric_attributes.gen_ai",
      "instrument": null,
      "lineage": {
        "attributes": {
          "gen_ai.operation.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.system": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/gen-ai/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "GenAI server address.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "GenAI server port.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI service,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "This group describes GenAI server metrics attributes",
      "events": [],
      "id": "metric_attributes.gen_ai.server",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "gen_ai.operation.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.request.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.response.model": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "gen_ai.system": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.gen_ai"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/gen-ai/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "Describes RPC metric attributes.",
      "events": [],
      "id": "attributes.metrics.rpc",
      "instrument": null,
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "rpc.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.rpc"
          },
          "rpc.service": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.rpc"
          },
          "rpc.system": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.rpc"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/rpc/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "name": "exception.stacktrace",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "name": "exception.type",
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can\u0027t convert \u0027int\u0027 object to str implicitly"
          ],
          "name": "exception.message",
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Indicates that the exception is escaping the scope of the span.\n",
          "deprecated": {
            "note": "It\u0027s no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n",
            "reason": "obsoleted"
          },
          "name": "exception.escaped",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        }
      ],
      "brief": "This event describes a single exception.\n",
      "events": [],
      "id": "event.exception",
      "instrument": null,
      "lineage": {
        "attributes": {
          "exception.escaped": {
            "inherited_fields": [
              "brief",
              "deprecated",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.exception.deprecated"
          },
          "exception.message": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.exception"
          },
          "exception.stacktrace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.exception"
          },
          "exception.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.exception"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/exceptions/events.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": "exception",
      "span_kind": null,
      "stability": "stable",
      "type": "event",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "HTTP request headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "1.2.3.4",
              "1.2.3.5"
            ]
          ],
          "name": "http.request.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nThe `User-Agent` header is already captured in the `user_agent.original` attribute.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`\n  attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "name": "http.request.method_original",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "name": "http.request.resend_count",
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "HTTP response headers, `\u003ckey\u003e` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            [
              "application/json"
            ],
            [
              "abc",
              "def"
            ]
          ],
          "name": "http.response.header",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured.\nIncluding all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\n\nThe attribute value MUST consist of either multiple header values as an array of strings\nor a single-item array containing a possibly comma-concatenated string, depending on the way\nthe HTTP library provides access to headers.\n\nExamples:\n\n- A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`\n  attribute with value `[\"application/json\"]`.\n- A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`\n  attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "template[string[]]"
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This document defines semantic convention attributes in the HTTP namespace.",
      "display_name": "HTTP Attributes",
      "events": [],
      "id": "registry.http",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/http/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "name": "otel.status_code",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "deprecated": null,
                "id": "ok",
                "note": null,
                "stability": "stable",
                "value": "OK"
              },
              {
                "brief": "The operation contains an error.",
                "deprecated": null,
                "id": "error",
                "note": null,
                "stability": "stable",
                "value": "ERROR"
              }
            ]
          }
        },
        {
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "name": "otel.status_description",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Span attributes used by non-OTLP exporters or on metrics to represent OpenTelemetry Span\u0027s concepts.",
      "events": [],
      "id": "otel_span",
      "instrument": null,
      "lineage": {
        "attributes": {
          "otel.status_code": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.otel"
          },
          "otel.status_description": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.otel"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/otel/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.local.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.local.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        }
      ],
      "brief": "These attributes may be used for any network related operation.\n",
      "events": [],
      "id": "network-core",
      "instrument": null,
      "lineage": {
        "attributes": {
          "network.local.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.local.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.peer.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.network"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/network/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "name": "otel.status_code",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "deprecated": null,
                "id": "ok",
                "note": null,
                "stability": "stable",
                "value": "OK"
              },
              {
                "brief": "The operation contains an error.",
                "deprecated": null,
                "id": "error",
                "note": null,
                "stability": "stable",
                "value": "ERROR"
              }
            ]
          }
        },
        {
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "name": "otel.status_description",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Attributes reserved for OpenTelemetry",
      "display_name": "OTel Attributes",
      "events": [],
      "id": "registry.otel",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/otel/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "name": "otel.scope.name",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).",
          "examples": [
            "1.0.0"
          ],
          "name": "otel.scope.version",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Attributes used by non-OTLP exporters to represent OpenTelemetry Scope\u0027s concepts.",
      "display_name": "OTel Scope Attributes",
      "events": [],
      "id": "registry.otel.scope",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/otel/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "These attributes may be used to describe the server in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn\u0027t expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "display_name": "Server Attributes",
      "events": [],
      "id": "registry.server",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/server/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Indicates that the exception is escaping the scope of the span.\n",
          "deprecated": {
            "note": "It\u0027s no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n",
            "reason": "obsoleted"
          },
          "name": "exception.escaped",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        }
      ],
      "brief": "Deprecated exception attributes.\n",
      "display_name": "Deprecated Exception Attributes",
      "events": [],
      "id": "registry.exception.deprecated",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/exceptions/deprecated/registry-deprecated.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "name": "telemetry.sdk.name",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK\u0027s main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The language of the telemetry SDK.\n",
          "name": "telemetry.sdk.language",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": null,
                "deprecated": null,
                "id": "cpp",
                "note": null,
                "stability": "stable",
                "value": "cpp"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "dotnet",
                "note": null,
                "stability": "stable",
                "value": "dotnet"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "erlang",
                "note": null,
                "stability": "stable",
                "value": "erlang"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "go",
                "note": null,
                "stability": "stable",
                "value": "go"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "java",
                "note": null,
                "stability": "stable",
                "value": "java"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "nodejs",
                "note": null,
                "stability": "stable",
                "value": "nodejs"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "php",
                "note": null,
                "stability": "stable",
                "value": "php"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "python",
                "note": null,
                "stability": "stable",
                "value": "python"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "ruby",
                "note": null,
                "stability": "stable",
                "value": "ruby"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "rust",
                "note": null,
                "stability": "stable",
                "value": "rust"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "swift",
                "note": null,
                "stability": "stable",
                "value": "swift"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "webjs",
                "note": null,
                "stability": "stable",
                "value": "webjs"
              }
            ]
          }
        },
        {
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "name": "telemetry.sdk.version",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "This document defines attributes for telemetry SDK.\n",
      "display_name": "Telemetry Attributes",
      "events": [],
      "id": "registry.telemetry",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/telemetry/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Function\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": [
            "com.example.MyHttpService.serveRequest",
            "GuzzleHttp\\Client::transfer",
            "fopen"
          ],
          "name": "code.function.name",
          "note": "Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\nThe values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n`code.stacktrace` without information on arguments.\n\nExamples:\n\n* Java method: `com.example.MyHttpService.serveRequest`\n* Java anonymous class method: `com.mycompany.Main$1.myMethod`\n* Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n* PHP function: `GuzzleHttp\\Client::transfer`\n* Go function: `github.com/my/repo/pkg.foo.func5`\n* Elixir: `OpenTelemetry.Ctx.new`\n* Erlang: `opentelemetry_ctx:new`\n* Rust: `playground::my_module::my_cool_func`\n* C function: `fopen`\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Function\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "name": "code.file.path",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Line\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": 42,
          "name": "code.line.number",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Line\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": 16,
          "name": "code.column.number",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Location\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "name": "code.stacktrace",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "These attributes provide context about source code\n",
      "display_name": "Code Attributes",
      "events": [],
      "id": "registry.code",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/code/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Describes JVM memory metric attributes.",
      "events": [],
      "id": "attributes.jvm.memory",
      "instrument": null,
      "lineage": {
        "attributes": {
          "jvm.memory.pool.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.memory.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Measure of memory used.",
      "events": [],
      "id": "metric.jvm.memory.used",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "jvm.memory.pool.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.memory.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.memory.used",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Measure of memory committed.",
      "events": [],
      "id": "metric.jvm.memory.committed",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "jvm.memory.pool.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.memory.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.memory.committed",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Measure of max obtainable memory.",
      "events": [],
      "id": "metric.jvm.memory.limit",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "jvm.memory.pool.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.memory.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.memory.limit",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "name": "jvm.memory.type",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Heap memory.",
                "deprecated": null,
                "id": "heap",
                "note": null,
                "stability": "stable",
                "value": "heap"
              },
              {
                "brief": "Non-heap memory",
                "deprecated": null,
                "id": "non_heap",
                "note": null,
                "stability": "stable",
                "value": "non_heap"
              }
            ]
          }
        },
        {
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "name": "jvm.memory.pool.name",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Measure of memory used, as measured after the most recent garbage collection event on this pool.",
      "events": [],
      "id": "metric.jvm.memory.used_after_last_gc",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "jvm.memory.pool.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.memory.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.memory.used_after_last_gc",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "name": "jvm.gc.action",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "name": "jvm.gc.name",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Duration of JVM garbage collection actions.",
      "events": [],
      "id": "metric.jvm.gc.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "jvm.gc.action": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.gc.cause": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.gc.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.gc.duration",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Whether the thread is daemon or not.",
          "name": "jvm.thread.daemon",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "boolean"
        },
        {
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "name": "jvm.thread.state",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A thread that has not yet started is in this state.",
                "deprecated": null,
                "id": "new",
                "note": null,
                "stability": "stable",
                "value": "new"
              },
              {
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "deprecated": null,
                "id": "runnable",
                "note": null,
                "stability": "stable",
                "value": "runnable"
              },
              {
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "deprecated": null,
                "id": "blocked",
                "note": null,
                "stability": "stable",
                "value": "blocked"
              },
              {
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "deprecated": null,
                "id": "waiting",
                "note": null,
                "stability": "stable",
                "value": "waiting"
              },
              {
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "deprecated": null,
                "id": "timed_waiting",
                "note": null,
                "stability": "stable",
                "value": "timed_waiting"
              },
              {
                "brief": "A thread that has exited is in this state.",
                "deprecated": null,
                "id": "terminated",
                "note": null,
                "stability": "stable",
                "value": "terminated"
              }
            ]
          }
        }
      ],
      "brief": "Number of executing platform threads.",
      "events": [],
      "id": "metric.jvm.thread.count",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "jvm.thread.daemon": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          },
          "jvm.thread.state": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.jvm"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.thread.count",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{thread}"
    },
    {
      "attributes": [],
      "brief": "Number of classes loaded since JVM start.",
      "events": [],
      "id": "metric.jvm.class.loaded",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.class.loaded",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{class}"
    },
    {
      "attributes": [],
      "brief": "Number of classes unloaded since JVM start.",
      "events": [],
      "id": "metric.jvm.class.unloaded",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.class.unloaded",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{class}"
    },
    {
      "attributes": [],
      "brief": "Number of classes currently loaded.",
      "events": [],
      "id": "metric.jvm.class.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.class.count",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{class}"
    },
    {
      "attributes": [],
      "brief": "Number of processors available to the Java virtual machine.",
      "events": [],
      "id": "metric.jvm.cpu.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.cpu.count",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{cpu}"
    },
    {
      "attributes": [],
      "brief": "CPU time used by the process as reported by the JVM.",
      "events": [],
      "id": "metric.jvm.cpu.time",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.cpu.time",
      "name": null,
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [],
      "brief": "Recent CPU utilization for the process as reported by the JVM.",
      "events": [],
      "id": "metric.jvm.cpu.recent_utilization",
      "instrument": "gauge",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/jvm/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "jvm.cpu.recent_utilization",
      "name": null,
      "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "1"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Defines minimal set of attributes used by all messaging systems.\n",
      "events": [],
      "id": "attributes.messaging.trace.minimal",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Peer address of the messaging intermediary node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `network.peer.*` attributes are applicable.\nNetwork peer address and port are important when the application interacts with individual intermediary nodes directly,\nIf a messaging operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": {
            "recommended": "If applicable for this messaging system."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Peer port of the messaging intermediary node where the operation was performed.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Defines a full set of attributes used in messaging systems.\n",
      "events": [],
      "id": "messaging.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.client.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.consumer.group.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.anonymous": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.partition.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.subscription.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.temporary": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.conversation_id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.envelope.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.system": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "network.peer.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes that describe messaging operation along with network information.",
      "events": [],
      "id": "messaging.network.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "network.peer.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "name": "network.peer.port",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "network.peer.address",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for RabbitMQ\n",
      "events": [],
      "id": "messaging.rabbitmq",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.conversation_id": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.rabbitmq.destination.routing_key": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rabbitmq"
          },
          "messaging.rabbitmq.message.delivery_tag": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rabbitmq"
          },
          "network.peer.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.peer.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for Apache Kafka\n",
      "events": [],
      "id": "messaging.kafka",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.client.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.consumer.group.name": {
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.partition.id": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.kafka.message.key": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.kafka"
          },
          "messaging.kafka.message.tombstone": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.kafka"
          },
          "messaging.kafka.offset": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.kafka"
          },
          "messaging.message.body.size": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for Apache RocketMQ\n",
      "events": [],
      "id": "messaging.rocketmq",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.client.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.consumer.group.name": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.body.size": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.rocketmq.consumption_model": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.delay_time_level": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.delivery_timestamp": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.group": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.keys": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.tag": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.message.type": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "messaging.rocketmq.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.rocketmq"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for Google Cloud Pub/Sub\n",
      "events": [],
      "id": "messaging.gcp_pubsub",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.subscription.name": {
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.gcp_pubsub.message.ack_deadline": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.gcp_pubsub"
          },
          "messaging.gcp_pubsub.message.ack_id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.gcp_pubsub"
          },
          "messaging.gcp_pubsub.message.delivery_attempt": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.gcp_pubsub"
          },
          "messaging.gcp_pubsub.message.ordering_key": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.gcp_pubsub"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for Azure Service Bus\n",
      "events": [],
      "id": "messaging.servicebus",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.subscription.name": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.conversation_id": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.servicebus.disposition_status": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.servicebus"
          },
          "messaging.servicebus.message.delivery_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging.servicebus"
          },
          "messaging.servicebus.message.enqueued_time": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.servicebus"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes for Azure Event Hubs\n",
      "events": [],
      "id": "messaging.eventhubs",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.batch.message_count": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.consumer.group.name": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.destination.partition.id": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.eventhubs.message.enqueued_time": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.messaging.eventhubs"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes that exist for SQS request types.",
      "events": [],
      "id": "messaging.aws.sqs",
      "instrument": null,
      "lineage": {
        "attributes": {
          "aws.request_id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aws"
          },
          "aws.sqs.queue.url": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aws.sqs"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Attributes that exist for SNS request types.",
      "events": [],
      "id": "messaging.aws.sns",
      "instrument": null,
      "lineage": {
        "attributes": {
          "aws.request_id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aws"
          },
          "aws.sns.topic.arn": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aws.sns"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "messaging.destination.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.message.id": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "messaging.operation.type": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.messaging"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/messaging/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a stored procedure within the database.",
          "examples": [
            "GetCustomer"
          ],
          "name": "db.stored_procedure.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nFor batch operations, if the individual operations are known to have the same\nstored procedure name then that stored procedure name SHOULD be used.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The number of queries included in a batch operation.",
          "examples": [
            2,
            3,
            4
          ],
          "name": "db.operation.batch.size",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "name": "db.system.name",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation\u0027s best knowledge.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "[MariaDB](https://mariadb.org/)",
                "deprecated": null,
                "id": "mariadb",
                "note": null,
                "stability": "stable",
                "value": "mariadb"
              },
              {
                "brief": "[Microsoft SQL Server](https://www.microsoft.com/sql-server)",
                "deprecated": null,
                "id": "microsoft.sql_server",
                "note": null,
                "stability": "stable",
                "value": "microsoft.sql_server"
              },
              {
                "brief": "[MySQL](https://www.mysql.com/)",
                "deprecated": null,
                "id": "mysql",
                "note": null,
                "stability": "stable",
                "value": "mysql"
              },
              {
                "brief": "[PostgreSQL](https://www.postgresql.org/)",
                "deprecated": null,
                "id": "postgresql",
                "note": null,
                "stability": "stable",
                "value": "postgresql"
              }
            ]
          }
        }
      ],
      "brief": "This group defines the attributes used to describe telemetry in the context of databases.\n",
      "display_name": "General Database Attributes",
      "events": [],
      "id": "registry.db",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/database/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Database Client attributes",
      "events": [],
      "id": "attributes.db.client.minimal",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Cosmos DB container name.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "name": "db.namespace",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Azure Cosmos DB Client attributes",
      "events": [],
      "id": "attributes.azure.cosmosdb.minimal",
      "instrument": null,
      "lineage": {
        "attributes": {
          "azure.cosmosdb.consistency.level": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.azure.cosmosdb"
          },
          "azure.cosmosdb.response.sub_status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.azure.cosmosdb"
          },
          "db.collection.name": {
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.namespace": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "stability": "development",
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "This group defines the attributes describing database operations that may have queries.",
      "events": [],
      "id": "attributes.db.client.with_query",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey ?"
          ],
          "name": "db.query.text",
          "note": "For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nParameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Database response status code.",
          "examples": [
            "102",
            "ORA-17002",
            "08P01",
            "404"
          ],
          "name": "db.response.status_code",
          "note": "The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\nSemantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.\n",
          "requirement_level": {
            "conditionally_required": "If the operation failed and status code is available."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Low cardinality summary of a database query.\n",
          "examples": [
            "SELECT wuser_table",
            "INSERT shipping_details SELECT orders",
            "get user by id"
          ],
          "name": "db.query.summary",
          "note": "The query summary describes a class of database queries and is useful\nas a grouping key, especially when analyzing telemetry for database\ncalls involving complex queries.\n\nSummary may be available to the instrumentation through\ninstrumentation hooks or other means. If it is not available, instrumentations\nthat support query parsing SHOULD generate a summary following\n[Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\nsection.\n",
          "requirement_level": {
            "recommended": "if available through instrumentation hooks or if the instrumentation supports generating a query summary."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "name": "db.collection.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe collection name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple collections\nin non-batch operations.\n\nFor batch operations, if the individual operations are known to have the same\ncollection name then that collection name SHOULD be used.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if a database call is performed on a single collection.\n"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "name": "db.operation.name",
          "note": "It is RECOMMENDED to capture the value as provided by the application\nwithout attempting to do any case normalization.\n\nThe operation name SHOULD NOT be extracted from `db.query.text`,\nwhen the database system supports query text with multiple operations\nin non-batch operations.\n\nIf spaces can occur in the operation name, multiple consecutive spaces\nSHOULD be normalized to a single space.\n\nFor batch operations, if the individual operations are known to have the same operation name\nthen that operation name SHOULD be used prepended by `BATCH `,\notherwise `db.operation.name` SHOULD be `BATCH` or some other database\nsystem specific term if more applicable.\n",
          "requirement_level": {
            "conditionally_required": "If readily available and if there is a single operation name that describes the database call.\n"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.\nWhen using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.\nInstrumentations SHOULD document how `error.type` is populated.\n",
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "This group defines the attributes describing database operations that have operation name, collection name and query.",
      "events": [],
      "id": "attributes.db.client.with_query_and_collection",
      "instrument": null,
      "lineage": {
        "attributes": {
          "db.collection.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.operation.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.summary": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "db.query.text": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.db"
          },
          "db.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.db"
          },
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/database/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "name": "signalr.connection.status",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "The connection was closed normally.",
                "deprecated": null,
                "id": "normal_closure",
                "note": null,
                "stability": "stable",
                "value": "normal_closure"
              },
              {
                "brief": "The connection was closed due to a timeout.",
                "deprecated": null,
                "id": "timeout",
                "note": null,
                "stability": "stable",
                "value": "timeout"
              },
              {
                "brief": "The connection was closed because the app is shutting down.",
                "deprecated": null,
                "id": "app_shutdown",
                "note": null,
                "stability": "stable",
                "value": "app_shutdown"
              }
            ]
          }
        },
        {
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "name": "signalr.transport",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "ServerSentEvents protocol",
                "deprecated": null,
                "id": "server_sent_events",
                "note": null,
                "stability": "stable",
                "value": "server_sent_events"
              },
              {
                "brief": "LongPolling protocol",
                "deprecated": null,
                "id": "long_polling",
                "note": null,
                "stability": "stable",
                "value": "long_polling"
              },
              {
                "brief": "WebSockets protocol",
                "deprecated": null,
                "id": "web_sockets",
                "note": null,
                "stability": "stable",
                "value": "web_sockets"
              }
            ]
          }
        }
      ],
      "brief": "SignalR attributes",
      "display_name": "SignalR Attributes",
      "events": [],
      "id": "registry.signalr",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/signalr/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Common ASP.NET Core rate-limiting metrics attributes",
      "events": [],
      "id": "aspnetcore.common.rate_limiting.metrics.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "name": "aspnetcore.routing.is_fallback",
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "stability": "stable",
          "type": "boolean"
        },
        {
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "name": "aspnetcore.routing.match_status",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Match succeeded",
                "deprecated": null,
                "id": "success",
                "note": null,
                "stability": "stable",
                "value": "success"
              },
              {
                "brief": "Match failed",
                "deprecated": null,
                "id": "failure",
                "note": null,
                "stability": "stable",
                "value": "failure"
              }
            ]
          }
        }
      ],
      "brief": "Number of requests that were attempted to be matched to an endpoint.",
      "events": [],
      "id": "metric.aspnetcore.routing.match_attempts",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "aspnetcore.routing.is_fallback": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "aspnetcore.routing.match_status": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "http.route": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.routing.match_attempts",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{match_attempt}"
    },
    {
      "attributes": [
        {
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "name": "aspnetcore.diagnostics.handler.type",
          "requirement_level": {
            "conditionally_required": "if and only if the exception was handled by this handler."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "name": "aspnetcore.diagnostics.exception.result",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Exception was handled by the exception handling middleware.",
                "deprecated": null,
                "id": "handled",
                "note": null,
                "stability": "stable",
                "value": "handled"
              },
              {
                "brief": "Exception was not handled by the exception handling middleware.",
                "deprecated": null,
                "id": "unhandled",
                "note": null,
                "stability": "stable",
                "value": "unhandled"
              },
              {
                "brief": "Exception handling was skipped because the response had started.",
                "deprecated": null,
                "id": "skipped",
                "note": null,
                "stability": "stable",
                "value": "skipped"
              },
              {
                "brief": "Exception handling didn\u0027t run because the request was aborted.",
                "deprecated": null,
                "id": "aborted",
                "note": null,
                "stability": "stable",
                "value": "aborted"
              }
            ]
          }
        },
        {
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Number of exceptions caught by exception handling middleware.",
      "events": [],
      "id": "metric.aspnetcore.diagnostics.exceptions",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "aspnetcore.diagnostics.exception.result": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "aspnetcore.diagnostics.handler.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "error.type": {
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.error"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.diagnostics.exceptions",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{exception}"
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Number of requests that are currently active on the server that hold a rate limiting lease.",
      "events": [],
      "id": "metric.aspnetcore.rate_limiting.active_request_leases",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.rate_limiting.active_request_leases",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{request}"
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "The duration of rate limiting lease held by requests on the server.",
      "events": [],
      "id": "metric.aspnetcore.rate_limiting.request_lease.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.rate_limiting.request_lease.duration",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "name": "aspnetcore.rate_limiting.result",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Lease was acquired",
                "deprecated": null,
                "id": "acquired",
                "note": null,
                "stability": "stable",
                "value": "acquired"
              },
              {
                "brief": "Lease request was rejected by the endpoint limiter",
                "deprecated": null,
                "id": "endpoint_limiter",
                "note": null,
                "stability": "stable",
                "value": "endpoint_limiter"
              },
              {
                "brief": "Lease request was rejected by the global limiter",
                "deprecated": null,
                "id": "global_limiter",
                "note": null,
                "stability": "stable",
                "value": "global_limiter"
              },
              {
                "brief": "Lease request was canceled",
                "deprecated": null,
                "id": "request_canceled",
                "note": null,
                "stability": "stable",
                "value": "request_canceled"
              }
            ]
          }
        }
      ],
      "brief": "The time the request spent in a queue waiting to acquire a rate limiting lease.",
      "events": [],
      "id": "metric.aspnetcore.rate_limiting.request.time_in_queue",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "aspnetcore.rate_limiting.result": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.rate_limiting.request.time_in_queue",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Number of requests that are currently queued, waiting to acquire a rate limiting lease.",
      "events": [],
      "id": "metric.aspnetcore.rate_limiting.queued_requests",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.rate_limiting.queued_requests",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{request}"
    },
    {
      "attributes": [
        {
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "name": "aspnetcore.rate_limiting.policy",
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "name": "aspnetcore.rate_limiting.result",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Lease was acquired",
                "deprecated": null,
                "id": "acquired",
                "note": null,
                "stability": "stable",
                "value": "acquired"
              },
              {
                "brief": "Lease request was rejected by the endpoint limiter",
                "deprecated": null,
                "id": "endpoint_limiter",
                "note": null,
                "stability": "stable",
                "value": "endpoint_limiter"
              },
              {
                "brief": "Lease request was rejected by the global limiter",
                "deprecated": null,
                "id": "global_limiter",
                "note": null,
                "stability": "stable",
                "value": "global_limiter"
              },
              {
                "brief": "Lease request was canceled",
                "deprecated": null,
                "id": "request_canceled",
                "note": null,
                "stability": "stable",
                "value": "request_canceled"
              }
            ]
          }
        }
      ],
      "brief": "Number of requests that tried to acquire a rate limiting lease.",
      "events": [],
      "id": "metric.aspnetcore.rate_limiting.requests",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          },
          "aspnetcore.rate_limiting.result": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.aspnetcore"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/aspnetcore/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "aspnetcore.rate_limiting.requests",
      "name": null,
      "note": "Requests could be:\n\n* Rejected by global or endpoint rate limiting policies\n* Canceled while waiting for the lease.\n\nMeter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{request}"
    },
    {
      "attributes": [
        {
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "name": "signalr.connection.status",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "The connection was closed normally.",
                "deprecated": null,
                "id": "normal_closure",
                "note": null,
                "stability": "stable",
                "value": "normal_closure"
              },
              {
                "brief": "The connection was closed due to a timeout.",
                "deprecated": null,
                "id": "timeout",
                "note": null,
                "stability": "stable",
                "value": "timeout"
              },
              {
                "brief": "The connection was closed because the app is shutting down.",
                "deprecated": null,
                "id": "app_shutdown",
                "note": null,
                "stability": "stable",
                "value": "app_shutdown"
              }
            ]
          }
        },
        {
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "name": "signalr.transport",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "ServerSentEvents protocol",
                "deprecated": null,
                "id": "server_sent_events",
                "note": null,
                "stability": "stable",
                "value": "server_sent_events"
              },
              {
                "brief": "LongPolling protocol",
                "deprecated": null,
                "id": "long_polling",
                "note": null,
                "stability": "stable",
                "value": "long_polling"
              },
              {
                "brief": "WebSockets protocol",
                "deprecated": null,
                "id": "web_sockets",
                "note": null,
                "stability": "stable",
                "value": "web_sockets"
              }
            ]
          }
        }
      ],
      "brief": "The duration of connections on the server.",
      "events": [],
      "id": "metric.signalr.server.connection.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "signalr.connection.status": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.signalr"
          },
          "signalr.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.signalr"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/signalr/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "signalr.server.connection.duration",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "name": "signalr.connection.status",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "The connection was closed normally.",
                "deprecated": null,
                "id": "normal_closure",
                "note": null,
                "stability": "stable",
                "value": "normal_closure"
              },
              {
                "brief": "The connection was closed due to a timeout.",
                "deprecated": null,
                "id": "timeout",
                "note": null,
                "stability": "stable",
                "value": "timeout"
              },
              {
                "brief": "The connection was closed because the app is shutting down.",
                "deprecated": null,
                "id": "app_shutdown",
                "note": null,
                "stability": "stable",
                "value": "app_shutdown"
              }
            ]
          }
        },
        {
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "name": "signalr.transport",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "ServerSentEvents protocol",
                "deprecated": null,
                "id": "server_sent_events",
                "note": null,
                "stability": "stable",
                "value": "server_sent_events"
              },
              {
                "brief": "LongPolling protocol",
                "deprecated": null,
                "id": "long_polling",
                "note": null,
                "stability": "stable",
                "value": "long_polling"
              },
              {
                "brief": "WebSockets protocol",
                "deprecated": null,
                "id": "web_sockets",
                "note": null,
                "stability": "stable",
                "value": "web_sockets"
              }
            ]
          }
        }
      ],
      "brief": "Number of connections that are currently active on the server.",
      "events": [],
      "id": "metric.signalr.server.active_connections",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "signalr.connection.status": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.signalr"
          },
          "signalr.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.signalr"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/signalr/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "signalr.server.active_connections",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{connection}"
    },
    {
      "attributes": [
        {
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "name": "url.fragment",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "name": "url.full",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\nis not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.\nIn such case username and password SHOULD be redacted and attribute\u0027s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).\n\nSensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the\nvalue `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`https://www.example.com/path?color=blue\u0026sig=REDACTED`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "name": "url.path",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "name": "url.query",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n\n![Development](https://img.shields.io/badge/-development-blue)\nQuery string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:\n\n* [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n* [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n* [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n\nThis list is subject to change over time.\n\nWhen a query string value is redacted, the query string key SHOULD still be preserved, e.g.\n`q=OpenTelemetry\u0026sig=REDACTED`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "name": "url.scheme",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Attributes describing URL.",
      "display_name": "URL Attributes",
      "events": [],
      "id": "registry.url",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/url/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "This document defines semantic conventions for remote procedure calls.",
      "events": [],
      "id": "rpc",
      "instrument": null,
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "rpc.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.rpc"
          },
          "rpc.service": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.rpc"
          },
          "rpc.system": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.rpc"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/rpc/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": {
            "conditionally_required": "if and only if process.exit.code is not 0"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Common CLI attributes.\n",
      "events": [],
      "id": "attributes.cli.common",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "process.command_args": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.process"
          },
          "process.executable.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.process"
          },
          "process.executable.path": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.process"
          },
          "process.exit.code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.process"
          },
          "process.pid": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.process"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/cli/spans.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "name": "telemetry.sdk.name",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK\u0027s main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "requirement_level": "required",
          "role": "identifying",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The language of the telemetry SDK.\n",
          "name": "telemetry.sdk.language",
          "requirement_level": "required",
          "role": "identifying",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": null,
                "deprecated": null,
                "id": "cpp",
                "note": null,
                "stability": "stable",
                "value": "cpp"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "dotnet",
                "note": null,
                "stability": "stable",
                "value": "dotnet"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "erlang",
                "note": null,
                "stability": "stable",
                "value": "erlang"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "go",
                "note": null,
                "stability": "stable",
                "value": "go"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "java",
                "note": null,
                "stability": "stable",
                "value": "java"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "nodejs",
                "note": null,
                "stability": "stable",
                "value": "nodejs"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "php",
                "note": null,
                "stability": "stable",
                "value": "php"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "python",
                "note": null,
                "stability": "stable",
                "value": "python"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "ruby",
                "note": null,
                "stability": "stable",
                "value": "ruby"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "rust",
                "note": null,
                "stability": "stable",
                "value": "rust"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "swift",
                "note": null,
                "stability": "stable",
                "value": "swift"
              },
              {
                "brief": null,
                "deprecated": null,
                "id": "webjs",
                "note": null,
                "stability": "stable",
                "value": "webjs"
              }
            ]
          }
        },
        {
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "name": "telemetry.sdk.version",
          "requirement_level": "required",
          "role": "descriptive",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "The telemetry SDK used to capture data recorded by the instrumentation libraries.\n",
      "events": [],
      "id": "entity.telemetry.sdk",
      "instrument": null,
      "lineage": {
        "attributes": {
          "telemetry.sdk.language": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "role"
            ],
            "source_group": "registry.telemetry"
          },
          "telemetry.sdk.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "role"
            ],
            "source_group": "registry.telemetry"
          },
          "telemetry.sdk.version": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "role"
            ],
            "source_group": "registry.telemetry"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/telemetry/entities.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": "telemetry.sdk",
      "span_kind": null,
      "stability": "stable",
      "type": "entity",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "General server attributes.\n",
      "events": [],
      "id": "server",
      "instrument": null,
      "lineage": {
        "attributes": {
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/server/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit\u0027s RECOMMENDED to:\n\n- Use a domain-specific attribute\n- Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "This document defines the shared attributes used to report an error.\n",
      "display_name": "Error Attributes",
      "events": [],
      "id": "registry.error",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/error/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Common kestrel attributes",
      "events": [],
      "id": "common.kestrel.attributes",
      "instrument": null,
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Number of connections that are currently active on the server.",
      "events": [],
      "id": "metric.kestrel.active_connections",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.active_connections",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{connection}"
    },
    {
      "attributes": [
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "The full name of exception type.",
          "examples": [
            "connection_reset",
            "invalid_handshake"
          ],
          "name": "error.type",
          "note": "Starting from .NET 9, Kestrel `kestrel.connection.duration` metric reports\nthe following errors types when a corresponding error occurs:\n\n| Value  | Description | Stability |\n|---|---|---|\n| `aborted_by_app` | The HTTP/1.1 connection was aborted when app code aborted an HTTP request with `HttpContext.Abort()`. |\n| `app_shutdown_timeout` | The connection was aborted during app shutdown. During shutdown, the server stops accepting new connections and HTTP requests, and it is given time for active requests to complete. If the app shutdown timeout is exceeded, all remaining connections are aborted. |\n| `closed_critical_stream` | A critical control stream for an HTTP/3 connection was closed. |\n| `connection_reset` | The connection was reset while there were active HTTP/2 or HTTP/3 streams on the connection. |\n| `error_after_starting_response` | An error such as an unhandled application exception or invalid request body occurred after the response was started, causing an abort of the HTTP/1.1 connection. |\n| `error_reading_headers` | An error occurred when decoding HPACK headers in an HTTP/2 `HEADERS` frame. |\n| `error_writing_headers` | An error occurred when encoding HPACK headers in an HTTP/2 `HEADERS` frame. |\n| `flow_control_queue_size_exceeded` | The connection exceeded the outgoing flow control maximum queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `flow_control_window_exceeded` | The client sent more data than allowed by the current flow-control window. |\n| `frame_after_stream_close` | An HTTP/2 frame was received on a closed stream. |\n| `insufficient_tls_version` | The connection doesn\u0027t have TLS 1.2 or greater, as required by HTTP/2. |\n| `invalid_body_reader_state` | An error occurred when draining the request body, aborting the HTTP/1.1 connection. This could be caused by app code reading the request body and missing a call to `PipeReader.AdvanceTo` in a finally block. |\n| `invalid_data_padding` | An HTTP/2 `HEADER` or `DATA` frame has an invalid amount of padding. |\n| `invalid_frame_length` | An HTTP/2 frame was received with an invalid frame payload length. The frame could contain a payload that is not valid for the type, or a `DATA` frame payload does not match the length specified in the frame header. |\n| `invalid_handshake` | An invalid HTTP/2 handshake was received. |\n| `invalid_http_version` | The connection received an HTTP request with the wrong version. For example, a browser sends an HTTP/1.1 request to a plain-text HTTP/2 connection. |\n| `invalid_request_headers` | The HTTP request contains invalid headers. This error can occur in a number of scenarios: a header might not be allowed by the HTTP protocol, such as a pseudo-header in the `HEADERS` frame of an HTTP/2 request. A header could also have an invalid value, such as a non-integer `content-length`, or a header name or value might contain invalid characters. |\n| `invalid_request_line` | The first line of an HTTP/1.1 request was invalid, potentially due to invalid content or exceeding the allowed limit. Configured by `KestrelServerLimits.MaxRequestLineSize`. |\n| `invalid_settings` | The connection received an HTTP/2 or HTTP/3 `SETTINGS` frame with invalid settings. |\n| `invalid_stream_id` | An HTTP/2 stream with an invalid stream ID was received. |\n| `invalid_window_update_size` | The server received an HTTP/2 `WINDOW_UPDATE` frame with a zero increment, or an increment that caused a flow-control window to exceed the maximum size. |\n| `io_error` | An `IOException` occurred while reading or writing HTTP/2 or HTTP/3 connection data. |\n| `keep_alive_timeout` | There was no activity on the connection, and the keep-alive timeout configured by `KestrelServerLimits.KeepAliveTimeout` was exceeded. |\n| `max_concurrent_connections_exceeded` | The connection exceeded the maximum concurrent connection limit. Configured by `KestrelServerLimits.MaxConcurrentConnections`. |\n| `max_frame_length_exceeded` | The connection received an HTTP/2 frame that exceeded the size limit specified by `Http2Limits.MaxFrameSize`. |\n| `max_request_body_size_exceeded` | The HTTP request body exceeded the maximum request body size limit. Configured by `KestrelServerLimits.MaxRequestBodySize`. |\n| `max_request_header_count_exceeded` | The HTTP request headers exceeded the maximum count limit. Configured by `KestrelServerLimits.MaxRequestHeaderCount`. |\n| `max_request_headers_total_size_exceeded` | The HTTP request headers exceeded the maximum total size limit. Configured by `KestrelServerLimits.MaxRequestHeadersTotalSize`. |\n| `min_request_body_data_rate` | Reading the request body timed out due to data arriving too slowly. Configured by `KestrelServerLimits.MinRequestBodyDataRate`. |\n| `min_response_data_rate` | Writing the response timed out because the client did not read it at the specified minimum data rate. Configured by `KestrelServerLimits.MinResponseDataRate`. |\n| `missing_stream_end` | The connection received an HTTP/2 `HEADERS` frame for trailers without a stream end flag. |\n| `output_queue_size_exceeded` | The connection exceeded the output queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `request_headers_timeout` | Request headers timed out while waiting for headers to be received after the request started. Configured by `KestrelServerLimits.RequestHeadersTimeout`. |\n| `response_content_length_mismatch` | The HTTP response body sent data that didn\u0027t match the response\u0027s `content-length` header. |\n| `server_timeout` | The connection timed out with the `IConnectionTimeoutFeature`. |\n| `stream_creation_error` | The HTTP/3 connection received a stream that it wouldn\u0027t accept. For example, the client created duplicate control streams. |\n| `stream_reset_limit_exceeded` | The connection received an excessive number of HTTP/2 stream resets and was closed with `ENHANCE_YOUR_CALM`. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |\n| `stream_self_dependency` | The connection received an HTTP/2 frame that caused a frame to depend on itself. |\n| `tls_handshake_failed` | An error occurred during the TLS handshake for a connection. Only reported for HTTP/1.1 and HTTP/2 connections. The TLS handshake for HTTP/3 is internal to QUIC transport. ![Development](https://img.shields.io/badge/-development-blue) |\n| `tls_not_supported` | A TLS handshake was received by an endpoint that isn\u0027t configured to support TLS. |\n| `unexpected_end_of_request_content` | The HTTP/1.1 request body ended before the data specified by the `content-length` header or chunked transfer encoding mechanism was received. |\n| `unexpected_frame` | An unexpected HTTP/2 or HTTP/3 frame type was received. The frame type is either unknown, unsupported, or invalid for the current stream state. |\n| `unknown_stream` | An HTTP/2 frame was received on an unknown stream. |\n| `write_canceled` | The cancellation of a response body write aborted the HTTP/1.1 connection. |\n\nIn other cases, `error.type` contains the fully qualified type name of the exception.\n",
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "The duration of connections on the server.",
      "events": [],
      "id": "metric.kestrel.connection.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "tls.protocol.version": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.tls"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.connection.duration",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Number of connections rejected by the server.",
      "events": [],
      "id": "metric.kestrel.rejected_connections",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.rejected_connections",
      "name": null,
      "note": "Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{connection}"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Number of connections that are currently queued and are waiting to start.",
      "events": [],
      "id": "metric.kestrel.queued_connections",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.queued_connections",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{connection}"
    },
    {
      "attributes": [
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.",
      "events": [],
      "id": "metric.kestrel.queued_requests",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.queued_requests",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{request}"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Number of connections that are currently upgraded (WebSockets). .",
      "events": [],
      "id": "metric.kestrel.upgraded_connections",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.upgraded_connections",
      "name": null,
      "note": "The counter only tracks HTTP/1.1 connections.\n\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{connection}"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        },
        {
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "name": "error.type",
          "note": "Captures the exception type when a TLS handshake fails.",
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "The duration of TLS handshakes on the server.",
      "events": [],
      "id": "metric.kestrel.tls_handshake.duration",
      "instrument": "histogram",
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "tls.protocol.version": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.tls"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.tls_handshake.duration",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "name": "network.type",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "IPv4",
                "deprecated": null,
                "id": "ipv4",
                "note": null,
                "stability": "stable",
                "value": "ipv4"
              },
              {
                "brief": "IPv6",
                "deprecated": null,
                "id": "ipv6",
                "note": null,
                "stability": "stable",
                "value": "ipv6"
              }
            ]
          }
        },
        {
          "brief": "[OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "name": "network.transport",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "TCP",
                "deprecated": null,
                "id": "tcp",
                "note": null,
                "stability": "stable",
                "value": "tcp"
              },
              {
                "brief": "UDP",
                "deprecated": null,
                "id": "udp",
                "note": null,
                "stability": "stable",
                "value": "udp"
              },
              {
                "brief": "Named or anonymous pipe.",
                "deprecated": null,
                "id": "pipe",
                "note": null,
                "stability": "stable",
                "value": "pipe"
              },
              {
                "brief": "Unix domain socket",
                "deprecated": null,
                "id": "unix",
                "note": null,
                "stability": "stable",
                "value": "unix"
              },
              {
                "brief": "QUIC",
                "deprecated": null,
                "id": "quic",
                "note": null,
                "stability": "stable",
                "value": "quic"
              }
            ]
          }
        }
      ],
      "brief": "Number of TLS handshakes that are currently in progress on the server.",
      "events": [],
      "id": "metric.kestrel.active_tls_handshakes",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "network.transport": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "network.type": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.server"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/kestrel/metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "kestrel.active_tls_handshakes",
      "name": null,
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{handshake}"
    },
    {
      "attributes": [
        {
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "name": "service.name",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "name": "service.version",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "A service instance.\n",
      "display_name": "Service Attributes",
      "events": [],
      "id": "registry.service",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/service/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Function\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": [
            "com.example.MyHttpService.serveRequest",
            "GuzzleHttp\\Client::transfer",
            "fopen"
          ],
          "name": "code.function.name",
          "note": "Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\nThe values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n`code.stacktrace` without information on arguments.\n\nExamples:\n\n* Java method: `com.example.MyHttpService.serveRequest`\n* Java anonymous class method: `com.mycompany.Main$1.myMethod`\n* Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n* PHP function: `GuzzleHttp\\Client::transfer`\n* Go function: `github.com/my/repo/pkg.foo.func5`\n* Elixir: `OpenTelemetry.Ctx.new`\n* Erlang: `opentelemetry_ctx:new`\n* Rust: `playground::my_module::my_cool_func`\n* C function: `fopen`\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Function\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "name": "code.file.path",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Line\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": 42,
          "name": "code.line.number",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Line\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": 16,
          "name": "code.column.number",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute MUST NOT be used on the Profile signal since the data is already captured in \u0027message Location\u0027. This constraint is imposed to prevent redundancy and maintain data integrity.\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\n",
          "name": "code.stacktrace",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "These attributes provide context about source code\n",
      "events": [],
      "id": "code",
      "instrument": null,
      "lineage": {
        "attributes": {
          "code.column.number": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.code"
          },
          "code.file.path": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.code"
          },
          "code.function.name": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.code"
          },
          "code.line.number": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.code"
          },
          "code.stacktrace": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.code"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/code/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [],
      "brief": "The number of processors available to the process.",
      "events": [],
      "id": "metric.dotnet.process.cpu.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.process.cpu.count",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as accessing [`Environment.ProcessorCount`](https://learn.microsoft.com/dotnet/api/system.environment.processorcount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{cpu}"
    },
    {
      "attributes": [],
      "brief": "CPU time used by the process.",
      "events": [],
      "id": "metric.dotnet.process.cpu.time",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "cpu.mode": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.cpu"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.process.cpu.time",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as accessing the corresponding processor time properties on [`System.Diagnostics.Process`](https://learn.microsoft.com/dotnet/api/system.diagnostics.process).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [],
      "brief": "The number of bytes of physical memory mapped to the process context.",
      "events": [],
      "id": "metric.dotnet.process.memory.working_set",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.process.memory.working_set",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Environment.WorkingSet`](https://learn.microsoft.com/dotnet/api/system.environment.workingset).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "name": "dotnet.gc.heap.generation",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Generation 0",
                "deprecated": null,
                "id": "gen0",
                "note": null,
                "stability": "stable",
                "value": "gen0"
              },
              {
                "brief": "Generation 1",
                "deprecated": null,
                "id": "gen1",
                "note": null,
                "stability": "stable",
                "value": "gen1"
              },
              {
                "brief": "Generation 2",
                "deprecated": null,
                "id": "gen2",
                "note": null,
                "stability": "stable",
                "value": "gen2"
              },
              {
                "brief": "Large Object Heap",
                "deprecated": null,
                "id": "loh",
                "note": null,
                "stability": "stable",
                "value": "loh"
              },
              {
                "brief": "Pinned Object Heap",
                "deprecated": null,
                "id": "poh",
                "note": null,
                "stability": "stable",
                "value": "poh"
              }
            ]
          }
        }
      ],
      "brief": "The number of garbage collections that have occurred since the process has started.",
      "events": [],
      "id": "metric.dotnet.gc.collections",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "dotnet.gc.heap.generation": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.dotnet"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.collections",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric uses the [`GC.CollectionCount(int generation)`](https://learn.microsoft.com/dotnet/api/system.gc.collectioncount) API to calculate exclusive collections per generation.\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{collection}"
    },
    {
      "attributes": [],
      "brief": "The *approximate* number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations.\n",
      "events": [],
      "id": "metric.dotnet.gc.heap.total_allocated",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.heap.total_allocated",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetTotalAllocatedBytes()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalallocatedbytes).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [],
      "brief": "The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection.\n",
      "events": [],
      "id": "metric.dotnet.gc.last_collection.memory.committed_size",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.last_collection.memory.committed_size",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().TotalCommittedBytes`](https://learn.microsoft.com/dotnet/api/system.gcmemoryinfo.totalcommittedbytes). Committed virtual memory may be larger than the heap size because it includes both memory for storing existing objects (the heap size) and some extra memory that is ready to handle newly allocated objects in the future.\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "name": "dotnet.gc.heap.generation",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Generation 0",
                "deprecated": null,
                "id": "gen0",
                "note": null,
                "stability": "stable",
                "value": "gen0"
              },
              {
                "brief": "Generation 1",
                "deprecated": null,
                "id": "gen1",
                "note": null,
                "stability": "stable",
                "value": "gen1"
              },
              {
                "brief": "Generation 2",
                "deprecated": null,
                "id": "gen2",
                "note": null,
                "stability": "stable",
                "value": "gen2"
              },
              {
                "brief": "Large Object Heap",
                "deprecated": null,
                "id": "loh",
                "note": null,
                "stability": "stable",
                "value": "loh"
              },
              {
                "brief": "Pinned Object Heap",
                "deprecated": null,
                "id": "poh",
                "note": null,
                "stability": "stable",
                "value": "poh"
              }
            ]
          }
        }
      ],
      "brief": "The managed GC heap size (including fragmentation), as observed during the latest garbage collection.\n",
      "events": [],
      "id": "metric.dotnet.gc.last_collection.heap.size",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "dotnet.gc.heap.generation": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.dotnet"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.last_collection.heap.size",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.SizeAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.sizeafterbytes).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [
        {
          "brief": "Name of the garbage collector managed heap generation.",
          "examples": [
            "gen0",
            "gen1",
            "gen2"
          ],
          "name": "dotnet.gc.heap.generation",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "Generation 0",
                "deprecated": null,
                "id": "gen0",
                "note": null,
                "stability": "stable",
                "value": "gen0"
              },
              {
                "brief": "Generation 1",
                "deprecated": null,
                "id": "gen1",
                "note": null,
                "stability": "stable",
                "value": "gen1"
              },
              {
                "brief": "Generation 2",
                "deprecated": null,
                "id": "gen2",
                "note": null,
                "stability": "stable",
                "value": "gen2"
              },
              {
                "brief": "Large Object Heap",
                "deprecated": null,
                "id": "loh",
                "note": null,
                "stability": "stable",
                "value": "loh"
              },
              {
                "brief": "Pinned Object Heap",
                "deprecated": null,
                "id": "poh",
                "note": null,
                "stability": "stable",
                "value": "poh"
              }
            ]
          }
        }
      ],
      "brief": "The heap fragmentation, as observed during the latest garbage collection.\n",
      "events": [],
      "id": "metric.dotnet.gc.last_collection.heap.fragmentation.size",
      "instrument": "updowncounter",
      "lineage": {
        "attributes": {
          "dotnet.gc.heap.generation": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.dotnet"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.last_collection.heap.fragmentation.size",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.FragmentationAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.fragmentationafterbytes).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [],
      "brief": "The total amount of time paused in GC since the process has started.",
      "events": [],
      "id": "metric.dotnet.gc.pause.time",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.gc.pause.time",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`GC.GetTotalPauseDuration()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalpauseduration).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [],
      "brief": "Count of bytes of intermediate language that have been compiled since the process has started.",
      "events": [],
      "id": "metric.dotnet.jit.compiled_il.size",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.jit.compiled_il.size",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompiledILBytes()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledilbytes).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "By"
    },
    {
      "attributes": [],
      "brief": "The number of times the JIT compiler (re)compiled methods since the process has started.\n",
      "events": [],
      "id": "metric.dotnet.jit.compiled_methods",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.jit.compiled_methods",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompiledMethodCount()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledmethodcount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{method}"
    },
    {
      "attributes": [],
      "brief": "The amount of time the JIT compiler has spent compiling methods since the process has started.\n",
      "events": [],
      "id": "metric.dotnet.jit.compilation.time",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.jit.compilation.time",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`JitInfo.GetCompilationTime()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompilationtime).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "s"
    },
    {
      "attributes": [],
      "brief": "The number of times there was contention when trying to acquire a monitor lock since the process has started.\n",
      "events": [],
      "id": "metric.dotnet.monitor.lock_contentions",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.monitor.lock_contentions",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Monitor.LockContentionCount`](https://learn.microsoft.com/dotnet/api/system.threading.monitor.lockcontentioncount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{contention}"
    },
    {
      "attributes": [],
      "brief": "The number of thread pool threads that currently exist.",
      "events": [],
      "id": "metric.dotnet.thread_pool.thread.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.thread_pool.thread.count",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.ThreadCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.threadcount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{thread}"
    },
    {
      "attributes": [],
      "brief": "The number of work items that the thread pool has completed since the process has started.\n",
      "events": [],
      "id": "metric.dotnet.thread_pool.work_item.count",
      "instrument": "counter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.thread_pool.work_item.count",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.CompletedWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.completedworkitemcount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{work_item}"
    },
    {
      "attributes": [],
      "brief": "The number of work items that are currently queued to be processed by the thread pool.\n",
      "events": [],
      "id": "metric.dotnet.thread_pool.queue.length",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.thread_pool.queue.length",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`ThreadPool.PendingWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.pendingworkitemcount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{work_item}"
    },
    {
      "attributes": [],
      "brief": "The number of timer instances that are currently active.",
      "events": [],
      "id": "metric.dotnet.timer.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.timer.count",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`Timer.ActiveCount`](https://learn.microsoft.com/dotnet/api/system.threading.timer.activecount).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{timer}"
    },
    {
      "attributes": [],
      "brief": "The number of .NET assemblies that are currently loaded.",
      "events": [],
      "id": "metric.dotnet.assembly.count",
      "instrument": "updowncounter",
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.assembly.count",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as calling [`AppDomain.CurrentDomain.GetAssemblies().Length`](https://learn.microsoft.com/dotnet/api/system.appdomain.getassemblies).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{assembly}"
    },
    {
      "attributes": [
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "name": "error.type",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "The number of exceptions that have been thrown in managed code.",
      "events": [],
      "id": "metric.dotnet.exceptions",
      "instrument": "counter",
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/dotnet/runtime-metrics.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": "dotnet.exceptions",
      "name": null,
      "note": "Meter name: `System.Runtime`; Added in: .NET 9.0.\nThis metric reports the same values as counting calls to [`AppDomain.CurrentDomain.FirstChanceException`](https://learn.microsoft.com/dotnet/api/system.appdomain.firstchanceexception).\n",
      "span_kind": null,
      "stability": "stable",
      "type": "metric",
      "unit": "{exception}"
    },
    {
      "attributes": [
        {
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "client.address",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "name": "client.port",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it\u0027s available.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "int"
        }
      ],
      "brief": "General client attributes.\n",
      "events": [],
      "id": "client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "client.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.client"
          },
          "client.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "source_group": "registry.client"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/client/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        }
      ],
      "brief": "Describes HTTP attributes.",
      "events": [],
      "id": "attributes.http.common",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.address` SHOULD match the host component of the request target.\n\nIn all other cases, `server.address` SHOULD match the host component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n\nIf an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then\n`server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)\nis passed in its [absolte-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),\nthe `server.port` SHOULD match the port component of the request target.\n\nIn all other cases, `server.port` SHOULD match the port component of the\n`Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "requirement_level": "opt_in",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "HTTP Client attributes",
      "events": [],
      "id": "attributes.http.client",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.url"
          },
          "url.template": {
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "name": "network.protocol.name",
          "note": "The value SHOULD be normalized to lowercase.",
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "name": "network.protocol.version",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "name": "http.request.method",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "CONNECT method.",
                "deprecated": null,
                "id": "connect",
                "note": null,
                "stability": "stable",
                "value": "CONNECT"
              },
              {
                "brief": "DELETE method.",
                "deprecated": null,
                "id": "delete",
                "note": null,
                "stability": "stable",
                "value": "DELETE"
              },
              {
                "brief": "GET method.",
                "deprecated": null,
                "id": "get",
                "note": null,
                "stability": "stable",
                "value": "GET"
              },
              {
                "brief": "HEAD method.",
                "deprecated": null,
                "id": "head",
                "note": null,
                "stability": "stable",
                "value": "HEAD"
              },
              {
                "brief": "OPTIONS method.",
                "deprecated": null,
                "id": "options",
                "note": null,
                "stability": "stable",
                "value": "OPTIONS"
              },
              {
                "brief": "PATCH method.",
                "deprecated": null,
                "id": "patch",
                "note": null,
                "stability": "stable",
                "value": "PATCH"
              },
              {
                "brief": "POST method.",
                "deprecated": null,
                "id": "post",
                "note": null,
                "stability": "stable",
                "value": "POST"
              },
              {
                "brief": "PUT method.",
                "deprecated": null,
                "id": "put",
                "note": null,
                "stability": "stable",
                "value": "PUT"
              },
              {
                "brief": "TRACE method.",
                "deprecated": null,
                "id": "trace",
                "note": null,
                "stability": "stable",
                "value": "TRACE"
              },
              {
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "name": "http.response.status_code",
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "name": "error.type",
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "stability": "stable",
          "type": {
            "members": [
              {
                "brief": "A fallback error value to be used when the instrumentation doesn\u0027t define a custom value.\n",
                "deprecated": null,
                "id": "other",
                "note": null,
                "stability": "stable",
                "value": "_OTHER"
              }
            ]
          }
        },
        {
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "name": "http.route",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "requirement_level": {
            "conditionally_required": "If and only if it\u0027s available"
          },
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "name": "server.address",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        },
        {
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "name": "server.port",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "requirement_level": {
            "conditionally_required": "If available and `server.address` is set."
          },
          "stability": "stable",
          "type": "int"
        },
        {
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "name": "url.scheme",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "requirement_level": "required",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "HTTP Server attributes",
      "events": [],
      "id": "attributes.http.server",
      "instrument": null,
      "lineage": {
        "attributes": {
          "error.type": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.error"
          },
          "http.request.method": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.response.status_code": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "http.route": {
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ],
            "source_group": "registry.http"
          },
          "network.protocol.name": {
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ],
            "source_group": "registry.network"
          },
          "network.protocol.version": {
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ],
            "source_group": "registry.network"
          },
          "server.address": {
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ],
            "source_group": "registry.server"
          },
          "server.port": {
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.server"
          },
          "url.scheme": {
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ],
            "source_group": "registry.url"
          }
        },
        "provenance": {
          "path": "/home/weaver/source/http/common.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    },
    {
      "attributes": [
        {
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "name": "user_agent.original",
          "requirement_level": "recommended",
          "stability": "stable",
          "type": "string"
        }
      ],
      "brief": "Describes user-agent attributes.",
      "display_name": "User-agent Attributes",
      "events": [],
      "id": "registry.user_agent",
      "instrument": null,
      "lineage": {
        "provenance": {
          "path": "/home/weaver/source/user-agent/registry.yaml",
          "registry_id": "main"
        }
      },
      "metric_name": null,
      "name": null,
      "span_kind": null,
      "type": "attribute_group",
      "unit": null
    }
  ]
}

