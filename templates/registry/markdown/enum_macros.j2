{% import 'stability.j2' as stability %}
{% macro table(enum, notes) %}| Value  | Description | Stability |
|---|---|---|
{% for espec in enum.type.members | rejectattr("deprecated") | sort(attribute='value') %}| `{{ espec.value }}` | {{ (espec.brief or espec.id) | trim }}{{ notes.add({"note": espec.note}) }} | {{ stability.badge(espec.stability, espec.deprecated, espec.brief) }} |
{% endfor %}{{ notes.render() }}{{ generate_deprecated(enum, enum.type.members | selectattr("deprecated"), notes) }}{% endmacro %}
{% macro tables(enums, notes) -%}
{% for enum in enums | selectattr("type", "mapping") | sort(attribute="name") -%}{{"\n"}}---

`{{enum.name}}` has the following list of well-known values. If one of them applies, then the respective value MUST be used; otherwise, a custom value MAY be used.

{% if enum.deprecated %}{{generate_deprecated(enum, enum.type.members, notes)}}{%else%}{{ table(enum, notes) -}}{% endif %}{% endfor %}{% endmacro %}
{% macro field_table(enum, notes) %}
`{{enum.id}}` has the following list of well-known values. If one of them applies, then the respective value MUST be used; otherwise, a custom value MAY be used.

| Value  | Description | Stability |
|---|---|---|
{% for espec in enum.members | sort(attribute='value') %}| `{{ espec.value }}` | {{ (espec.brief or espec.id) | trim }}{{ notes.add({"note": espec.note}) }} | {{ stability.badge(espec.stability, espec.deprecated, espec.brief) }} |
{% endfor %}{{ notes.render() }}{% endmacro %}
{% macro field_tables(enums, notes) -%}
{% for enum in enums | sort(attribute="id") -%}
{{ field_table(enum, notes) -}}
{% endfor %}{% endmacro %}

{#- Macro for creating deprecated enum member table -#}
{% macro generate_deprecated(enum, members, notes) %}{% set filtered_members = members %}{% if (filtered_members is defined) and (filtered_members | length > 0) %}{% if enum.deprecated is undefined %}{{"\n"}}{%endif%}<details>
<summary><b>Deprecated Values:</b></summary>

| Value  | Description | Deprecation Explanation |
|---|---|---|
{% for member in filtered_members | sort(attribute='value') %}| `{{ member.value }}` | {{ (member.brief or member.id) | trim }}{{ notes.add({"note": member.note}) }} | {{deprecation_reason(enum, member) | trim}} |
{% endfor %}{{ notes.render() }}
</details>
{% endif %}{% endmacro %}

{% macro deprecation_reason(enum, member)%}
{% if member.deprecated and member.deprecated.reason == "renamed" %} Use `{{member.deprecated.renamed_to}}` value {% if enum.deprecated and enum.deprecated.reason == "renamed"%} for `{{enum.deprecated.renamed_to}}` attribute {% endif %} instead. 
{% elif member.deprecated %} {{member.deprecated.note}}
{% elif enum.deprecated.reason == "renamed" %} Use `{{member.value}}` value for `{{enum.deprecated.renamed_to}}` attribute instead.
{% else %}{{enum.deprecated.note}}{% endif %}
{% endmacro %}