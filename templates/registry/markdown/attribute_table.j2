{% import 'requirement.j2' as requirement %}
{% import 'stability.j2' as stability %}
{% import 'notes.j2' as notes %}
{% import 'attribute_macros.j2' as attrs %}
{% import 'enum_macros.j2' as enums %}
{% import 'sampling_macros.j2' as sampling %}
{% import 'examples_macros.j2' as examples %}
{#- Macro for creating attribute table -#}
{% macro generate(attributes, tag_filter, attribute_registry_base_url, lineage_attributes, title) %}{% if (tag_filter | length == 0) %}{% set filtered_attributes = attributes | rejectattr("deprecated") | attribute_sort %}{% else %}{% set filtered_attributes = attributes | rejectattr("deprecated") | selectattr("tag", "in", tag_filter) | attribute_sort %}{% endif %}{% if (filtered_attributes is defined) and (filtered_attributes | length > 0) %}{% if title and title != "Other" and title != "" %}**{{title}}:**{% elif title is undefined or title != "Other" %}**Attributes:**{%endif%}

| Key | Stability | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Value Type | Description | Example Values |
|---|---|---|---|---|---|
{% for attribute in filtered_attributes if attribute.deprecated is not defined or attribute.deprecated is none %}| {{ attrs.name_with_link(attribute, attribute_registry_base_url, lineage_attributes) }} | {{ stability.badge(attribute.stability, attribute.deprecated, attribute.brief) | trim }} | {{ requirement.render({"level": attribute.requirement_level, "name": attrs.name(attribute), "deprecated": attribute.deprecated}, notes) | trim }} | {{ attrs.type(attribute) }} | {{ attribute.brief | trim }}{{ notes.add({"note": attribute.note, "name": attrs.name(attribute)}) }} | {{ examples.format(attribute) | trim }} |
{% endfor %}{{ notes.render() }}{{ sampling.snippet(filtered_attributes, attribute_registry_base_url, lineage_attributes) }}{{ enums.tables(filtered_attributes | selectattr("type", "mapping"), notes) }}
{% endif %}{{ generate_deprecated(attributes, tag_filter, attribute_registry_base_url, lineage_attributes)}}{% endmacro %}

{#- Macro for creating deprecated attribute table -#}
{% macro generate_deprecated(attributes, tag_filter, attribute_registry_base_url, lineage_attributes) %}{% if (tag_filter | length == 0) %}{% set filtered_attributes = attributes | selectattr("deprecated") | attribute_sort %}{% else %}{% set filtered_attributes = attributes | selectattr("tag", "in", tag_filter) | attribute_sort %}{% endif %}{% if (filtered_attributes is defined) and (filtered_attributes | length > 0) %}<details>
<summary><b>Deprecated Attributes:</b></summary>

| Key | Value Type | Summary | Example Values | Deprecation Explanation |
|---|---|---|---|---|
{% for attribute in filtered_attributes %}| {% if attribute_registry_base_url != "" %}{{ attrs.name_with_link(attribute, attribute_registry_base_url, lineage_attributes) }}{% else %}{% set attr_anchor = attribute.name | kebab_case %}<a id="{{ attr_anchor }}" href="#{{ attr_anchor }}">`{{ attrs.name(attribute) }}`</a>{%endif%} | {{ attrs.type(attribute) }} | {{ attribute.brief | trim }}{{ notes.add({"note": attribute.note, "name": attrs.name(attribute)}) }} | {{ examples.format(attribute) | trim }} | {% if attribute.deprecated.reason == "renamed" %} Use {% if attribute_registry_base_url != "" %}{{ attrs.renamed_to_with_link(attribute.deprecated.renamed_to, attribute_registry_base_url, lineage_attributes) }}{% else %}`{{attribute.deprecated.renamed_to}}`{%endif%} instead. {% else %} {{attribute.deprecated.note | trim}} {% endif %} |
{% endfor %}{{ notes.render() }}{{ sampling.snippet(filtered_attributes, attribute_registry_base_url, lineage_attributes) }}{{ enums.tables(filtered_attributes | selectattr("type", "mapping"), notes) }}
</details>
{% endif %}{% endmacro %}
