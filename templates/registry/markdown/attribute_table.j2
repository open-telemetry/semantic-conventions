{% import 'requirement.j2' as requirement %}
{% import 'stability.j2' as stability %}
{% import 'notes.j2' as notes %}
{% import 'attribute_macros.j2' as attrs %}
{% import 'enum_macros.j2' as enums %}
{% import 'examples_macros.j2' as examples %}
{#- Macro for creating attribute table -#}
{% macro generate(attributes, tag_filter, attribute_registry_base_url, lineage_attributes) %}{% if (tag_filter | length == 0) %}{% set filtered_attributes = attributes | attribute_sort %}{% else %}{% set filtered_attributes = attributes | selectattr("tag", "in", tag_filter) | attribute_sort %}{% endif %}
{% set general_attributes = filtered_attributes %}

{{ generate_general(general_attributes, attribute_registry_base_url, lineage_attributes) | trim }}
{% endmacro %}

{#- Macro for creating general attribute table -#}
{% macro generate_general(attributes, attribute_registry_base_url, lineage_attributes) %}{% if (attributes is defined) and (attributes | length > 0) %}
{{ generate_table(attributes, attribute_registry_base_url, lineage_attributes)}}
{% endif %}
{% endmacro %}

{#- Macro for creating attribute table -#}
{% macro generate_table(attributes, attribute_registry_base_url, lineage_attributes) %}{% if (attributes is defined) and (attributes | length > 0) %}
| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability | Capture Scope |
|---|---|---|---|---|---|---|
{% for attribute in attributes if attribute.deprecated is not defined or attribute.deprecated is none %}| {{ attrs.name_with_link(attribute, attribute_registry_base_url, lineage_attributes) }} | {{ attrs.type(attribute) }} | {{ attribute.brief | trim }}{{ notes.add({"note": attribute.note, "name": attrs.name(attribute)}) }} | {{ examples.format(attribute) | trim }} | {{ requirement.render({"level": attribute.requirement_level, "name": attrs.name(attribute), "deprecated": attribute.deprecated}, notes) | trim }} | {{ stability.badge(attribute.stability, attribute.deprecated, attribute.brief) | trim }} | {% if attribute.sampling_relevant == true %} Span Creation {% else %} Any {% endif %} |
{% endfor %}{{ notes.render() }}{{ enums.tables(attributes | selectattr("type", "mapping"), notes) }}
{% endif %}{% endmacro %}
